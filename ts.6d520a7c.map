{"version":3,"sources":["../node_modules/pts/dist/es2015/Util.js","../node_modules/pts/dist/es2015/LinearAlgebra.js","../node_modules/pts/dist/es2015/Op.js","../node_modules/pts/dist/es2015/Num.js","../node_modules/pts/dist/es2015/Pt.js","../node_modules/pts/dist/es2015/UI.js","../node_modules/pts/dist/es2015/Space.js","../node_modules/pts/dist/es2015/Form.js","../node_modules/pts/dist/es2015/Typography.js","../node_modules/pts/dist/es2015/Canvas.js","../node_modules/pts/dist/es2015/Create.js","../node_modules/pts/dist/es2015/Color.js","../node_modules/pts/dist/es2015/Dom.js","../node_modules/pts/dist/es2015/Svg.js","../node_modules/pts/dist/es2015/Physics.js","../node_modules/pts/dist/es2015/_module.js","ts/palettes.ts","ts/index.ts"],"names":["Const","xy","yz","xz","xyz","horizontal","vertical","identical","right","bottom_right","bottom","bottom_left","left","top_left","top","top_right","epsilon","max","Number","MAX_VALUE","min","MIN_VALUE","pi","Math","PI","two_pi","half_pi","quarter_pi","one_degree","rad_to_deg","deg_to_rad","gravity","newton","gaussian","Util","warnLevel","lv","_warnLevel","getArgs","args","length","pos","isArray","Array","ArrayBuffer","isView","prototype","slice","call","a","p","i","push","warn","message","defaultReturn","Error","console","randomInt","range","start","floor","random","split","pts","size","stride","loopBack","st","chunks","g","concat","flatten","flattenAsGroup","arr","Group","apply","combine","b","op","result","len","k","lenB","zip","arrays","z","stepper","callback","c","forRange","fn","step","temp","load","url","request","XMLHttpRequest","open","onload","status","responseText","onerror","send","Vec","add","subtract","multiply","toString","divide","dot","d","cross2D","cross","Pt","magnitude","sqrt","unit","m","undefined","abs","map","ceil","round","index","value","sum","s","Mat","isNum","$add","transposed","elementwise","ai","alen","$multiply","transpose","make","bi","blen","zipSlice","defaultValue","useLongest","ps","reduce","transform2D","pt","x","y","scale2DMatrix","rotate2DMatrix","cosA","sinA","shear2DMatrix","tanX","tanY","translate2DMatrix","scaleAt2DMatrix","sx","sy","at","rotateAt2DMatrix","shearAt2DMatrix","reflectAt2DMatrix","p1","p2","intercept","Line","yi","ang2","atan","slope","cos","sin","_errorLength","obj","param","_errorOutofBound","fromAngle","anchor","angle","toAngle","xi","sideOfPt2D","line","collinear","p3","threshold","to","$subtract","$cross","equals","magnitudeSq","perpendicularFromPt","asProjection","proj","$project","distanceFromPt","intersectRay2D","la","lb","pa","pb","y1","px","py","intersectLine2D","Geom","withinBound","intersectLineWithRay2D","ray","intersectPolygon2D","lineOrRay","poly","sourceIsRay","next","intersectLines2D","lines1","lines2","isRay","group","lenk","_ip","intersectGridWithRay2D","gridPt","t","intersectGridWithLine2D","gg","intersectRect2D","rect","box","boundingBox","fromPtArray","Rectangle","hasIntersectRect2D","sides","subpoints","num","interpolate","crop","cropAsCircle","tdx","ls","fromCenter","sideIdx","marker","graphic","atTail","h","perpendicular","toRect","$min","$max","from","topLeft","widthOrSize","height","fromTopLeft","center","half","toCircle","within","Circle","fromRect","toSquare","enclose","maxValue","minValue","corners","p0","rects","merged","polygon","quadrants","_center","halves","ratio","asRows","mid","Num","lerp","rect1","rect2","resetBoundingBox","r","fromTriangle","Triangle","circumcircle","incircle","radius","f","disc","discSqrt","t1","t2","intersectCircle2D","circle","dv","dr2","dr","ar","br","ar2","br2","clone","toTriangle","ang","inc","fromCircle","medial","Polygon","midpoints","oppositeSide","altitude","opp","orthocenter","incenter","bisector","area","perimeter","total","circumcenter","md","centroid","rectangle","lineAt","idx","lines","closePath","sp","mids","adjacentSides","gs","mag","segments","det","convexHull","sorted","sort","dq","bot","hull","network","originIndex","nearestPt","_near","_item","projectAxis","unitAxis","n","_axisOverlap","poly1","poly2","hasIntersectPoint","ln","hasIntersectCircle","info","which","dist","normal","edge","vertex","minDist","MAX_SAFE_INTEGER","axis","hasIntersectPolygon","plen","b1","b2","c1","c2","smallest","lp","ins","toRects","polys","boxes","unshift","Curve","getSteps","steps","ts","controlPoints","copyStart","_index","_calcPt","ctrls","params","catmullRom","catmullRomStep","cp","cardinal","tension","cardinalStep","h2","h3","bezier","bezierStep","bspline","bsplineTensionStep","bsplineStep","clamp","val","boundValue","randomRange","normalizeValue","average","cycle","mapToRange","currA","currB","targetA","targetB","boundAngle","boundRadian","radian","toRadian","toDegree","minPt","maxPt","ptOrIndex","direction","method","isPerpendicular","boundPt1","boundPt2","sortEdges","bounds","da","db","$cross2D","scale","scs","lenP","rotate2D","$take","shear2D","tanx","tan","tany","reflect2D","mat","cosTable","Float64Array","table","rad","sinTable","Shaping","linear","quadraticIn","quadraticOut","quadraticInOut","dt","cubicIn","cubicOut","cubicInOut","exponentialIn","pow","exponentialOut","sineIn","sineOut","sineInOut","cosineApprox","t4","circularIn","circularOut","circularInOut","elasticIn","elasticOut","elasticInOut","bounceIn","bounceOut","bounceInOut","sigmoid","exp","logSigmoid","A","B","seat","quadraticBezier","om2a","cubicBezier","curve","quadraticTarget","cliff","Range","constructor","_dims","_source","calc","_max","_min","_mag","dims","mapTo","exclude","target","append","update","ticks","count","Float32Array","dimensions","randomize","fill","id","_id","w","$to","anchorFromPt","change","self","ops","fns","_ops","$concat","toArray","$divide","$unit","projectScalar","$abs","$floor","$ceil","$round","atan2","angleBetween","join","p4","q1","q2","q3","q4","fromArray","list","chunkSize","insert","splice","remove","pts_per_segment","anchorTo","anchorFrom","chunk","tc","moveBy","moveTo","sortByDimension","dim","desc","forEachPt","ptFn","$matrixAdd","$matrixMultiply","$zip","Bound","_size","_topLeft","_bottomRight","_inited","init","fromBoundingRect","width","fromGroup","_updateSize","_updateCenter","_updatePosFromTop","_updatePosFromBottom","_updatePosFromCenter","bottomRight","depth","inited","UIShape","polyline","UIPointerActions","up","down","move","drag","uidrag","drop","over","out","enter","leave","all","UI","shape","states","_holds","_group","_shape","_counter","_states","_actions","fromRectangle","fromPolygon","fromUI","ui","state","key","on","_addHandler","off","_removeHandler","listen","_within","indexOf","_trigger","hold","unhold","track","uis","render","type","UIButton","_hoverID","hover","clicks","UA","_capID","onClick","offClick","onHover","ids","offHover","enterID","leaveID","UIDragger","_draggingID","_moveHoldID","dragging","offset","onDrag","offDrag","onDrop","offDrop","Space","bound","_time","prev","diff","end","players","playerCount","_animID","_pause","_refresh","_pointer","_isReady","_playing","refresh","player","animate","pid","animateID","resize","removeAll","play","time","requestAnimationFrame","bind","playItems","err","cancelAnimationFrame","replay","clear","pause","toggle","resume","stop","playOnce","duration","context","_renderFunc","customRendering","isPlaying","outerBound","innerBound","MultiTouchSpace","arguments","_pressed","_dragged","_hasMouse","_hasTouch","pointer","bindCanvas","evt","_canvas","addEventListener","unbindCanvas","removeEventListener","bindMouse","_bind","_mouseDown","_mouseUp","_mouseOver","_mouseOut","_mouseMove","bindTouch","_touchMove","touchesToPoints","item","pageX","pageY","_mouseAction","MouseEvent","hasOwnProperty","v","action","changedTouches","touch","UIA","preventDefault","Form","_ready","ready","_checkSize","required","VisualForm","_filled","_stroked","_font","Font","filled","stroked","currentFont","_multiple","groups","rest","fillOnly","stroke","linejoin","linecap","strokeOnly","points","point","circles","squares","polygons","face","weight","style","lineHeight","Typography","textWidthEstimator","samples","distribution","avg","str","truncate","tail","trim","substr","fontSizeToBox","byHeight","nh","fontSizeToThreshold","defaultSize","CanvasSpace","elem","_pixelScale","_autoResize","_bgcolor","_offscreen","_initialResize","_selector","Element","document","querySelector","nodeName","toLowerCase","_container","_createElement","appendChild","parentElement","body","setTimeout","_ctx","getContext","createElement","setAttribute","_resizeHandler","dispatchEvent","Event","setup","opt","bgcolor","autoResize","retina","r1","window","devicePixelRatio","r2","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","offscreen","_offCanvas","_offCtx","auto","translate","getBoundingClientRect","pageXOffset","pageYOffset","background","bg","pixelScale","hasOffscreen","offscreenCtx","offscreenCanvas","getForm","CanvasForm","element","parent","ctx","lastColor","fillStyle","fillRect","clearRect","clearOffscreen","save","restore","space","_style","strokeStyle","lineWidth","lineJoin","lineCap","_space","font","useOffscreen","renderOffscreen","drawImage","sizeOrFont","family","_estimateTextWidth","fontWidthEstimate","estimate","Typo","measureText","getTextWidth","_textTruncate","_textAlign","textAlign","reset","_paint","beginPath","arc","startAngle","endAngle","cc","square","halfsize","x1","x2","y2","lineTo","image","img","orig","original","text","txt","maxWidth","fillText","textBox","verticalAlign","overrideBaseline","textBaseline","paragraphBox","lstep","nextLine","sub","buffer","newln","lastIndexOf","lsize","lbox","lpad","alignText","alignment","baseline","log","Create","distributeRandom","distributeLinear","gridPts","columns","rows","orientation","gridCells","radialPts","noisePts","dx","dy","seed","np","Noise","initNoise","delaunay","Delaunay","grad3","permTable","perm","_n","noise2D","j","n00","n01","n10","n11","_fade","tx","_mesh","triangleOnly","indices","_superTriangle","opened","_circum","closed","tris","edges","circum","triangle","_dedupe","o","_cache","voronoi","vs","neighborPts","mesh","cs","neighbors","dmax","_triangle","tri","Color","_mode","_isNorm","fromHex","hex","alpha","substring","hexVal","parseInt","rgb","toMode","hsl","hsb","lab","lch","luv","maxValues","mode","ranges","rgba","convert","fname","toUpperCase","l","u","normalized","normalize","toNorm","$normalize","format","_hex","RGBtoHSL","normalizedInput","normalizedOutput","HSLtoRGB","q","sc","RGBtoHSB","HSBtoRGB","RGBtoLAB","XYZtoLAB","RGBtoXYZ","LABtoRGB","XYZtoRGB","LABtoXYZ","RGBtoLCH","LABtoLCH","LCHtoRGB","LCHtoLAB","RGBtoLUV","XYZtoLUV","LUVtoRGB","LUVtoXYZ","D65","cy","nnn","refU","refV","L","cubeY","DOMSpace","_css","appendTo","styles","innerHTML","backgroundColor","setAttr","data","getInlineStyles","HTMLSpace","HTMLForm","htmlElement","name","autoClass","querySelectorAll","scopeID","forEach","el","parentNode","removeChild","groupID","groupCount","currentID","currentClass","fontSize","fontFamily","styleTo","cls","updateScope","group_id","nextID","scope","getID","domID","rectStyle","class","position","textContent","SVGSpace","svgElement","SVGForm","createElementNS","cx","largeArc","sweep","_poly","World","friction","_lastTime","_gravity","_friction","_damping","_particles","_bodies","_pnames","_bnames","_bound","damping","bodyCount","particleCount","particle","bodyIndex","particleIndex","ms","_updateParticles","_updateBodies","drawParticles","_drawParticles","drawBodies","_drawBodies","Body","removeBody","removeParticle","edgeConstraint","stiff","precise","m1","mass","m2","mm","delta","distSq","boundConstraint","changed","previous","integrate","prevDt","addForce","verlet","collide","bds","klen","bk","processBody","mlen","processParticle","processEdges","Particle","_mass","_radius","_force","_prev","_lock","force","_body","lock","_lockPt","lastDt","lt","hit","damp","dp","np1","np2","f1","f2","dm1","dm2","_cs","_stiff","_locks","autoLink","autoMass","linkAll","link","index1","index2","nd","n2","linksToLines","cv","eg","lambda","m0","mr0","mr1"],"mappings":"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","file":"ts.6d520a7c.map","sourceRoot":"../src","sourcesContent":["/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Group } from \"./Pt\";\nexport const Const = {\n    xy: \"xy\",\n    yz: \"yz\",\n    xz: \"xz\",\n    xyz: \"xyz\",\n    horizontal: 0,\n    vertical: 1,\n    identical: 0,\n    right: 4,\n    bottom_right: 5,\n    bottom: 6,\n    bottom_left: 7,\n    left: 8,\n    top_left: 1,\n    top: 2,\n    top_right: 3,\n    epsilon: 0.0001,\n    max: Number.MAX_VALUE,\n    min: Number.MIN_VALUE,\n    pi: Math.PI,\n    two_pi: 6.283185307179586,\n    half_pi: 1.5707963267948966,\n    quarter_pi: 0.7853981633974483,\n    one_degree: 0.017453292519943295,\n    rad_to_deg: 57.29577951308232,\n    deg_to_rad: 0.017453292519943295,\n    gravity: 9.81,\n    newton: 0.10197,\n    gaussian: 0.3989422804014327\n};\nexport class Util {\n    static warnLevel(lv) {\n        if (lv) {\n            Util._warnLevel = lv;\n        }\n        return Util._warnLevel;\n    }\n    static getArgs(args) {\n        if (args.length < 1)\n            return [];\n        let pos = [];\n        let isArray = Array.isArray(args[0]) || ArrayBuffer.isView(args[0]);\n        if (typeof args[0] === 'number') {\n            pos = Array.prototype.slice.call(args);\n        }\n        else if (typeof args[0] === 'object' && !isArray) {\n            let a = [\"x\", \"y\", \"z\", \"w\"];\n            let p = args[0];\n            for (let i = 0; i < a.length; i++) {\n                if ((p.length && i >= p.length) || !(a[i] in p))\n                    break;\n                pos.push(p[a[i]]);\n            }\n        }\n        else if (isArray) {\n            pos = [].slice.call(args[0]);\n        }\n        return pos;\n    }\n    static warn(message = \"error\", defaultReturn = undefined) {\n        if (Util.warnLevel() == \"error\") {\n            throw new Error(message);\n        }\n        else if (Util.warnLevel() == \"warn\") {\n            console.warn(message);\n        }\n        return defaultReturn;\n    }\n    static randomInt(range, start = 0) {\n        return Math.floor(Math.random() * range) + start;\n    }\n    static split(pts, size, stride, loopBack = false) {\n        let st = stride || size;\n        let chunks = [];\n        for (let i = 0; i < pts.length; i++) {\n            if (i * st + size > pts.length) {\n                if (loopBack) {\n                    let g = pts.slice(i * st);\n                    g = g.concat(pts.slice(0, (i * st + size) % size));\n                    chunks.push(g);\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                chunks.push(pts.slice(i * st, i * st + size));\n            }\n        }\n        return chunks;\n    }\n    static flatten(pts, flattenAsGroup = true) {\n        let arr = (flattenAsGroup) ? new Group() : new Array();\n        return arr.concat.apply(arr, pts);\n    }\n    static combine(a, b, op) {\n        let result = [];\n        for (let i = 0, len = a.length; i < len; i++) {\n            for (let k = 0, lenB = b.length; k < lenB; k++) {\n                result.push(op(a[i], b[k]));\n            }\n        }\n        return result;\n    }\n    static zip(arrays) {\n        let z = [];\n        for (let i = 0, len = arrays[0].length; i < len; i++) {\n            let p = [];\n            for (let k = 0; k < arrays.length; k++) {\n                p.push(arrays[k][i]);\n            }\n            z.push(p);\n        }\n        return z;\n    }\n    static stepper(max, min = 0, stride = 1, callback) {\n        let c = min;\n        return function () {\n            c += stride;\n            if (c >= max) {\n                c = min + (c - max);\n            }\n            if (callback)\n                callback(c);\n            return c;\n        };\n    }\n    static forRange(fn, range, start = 0, step = 1) {\n        let temp = [];\n        for (let i = start, len = range; i < len; i += step) {\n            temp[i] = fn(i);\n        }\n        return temp;\n    }\n    static load(url, callback) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.onload = function () {\n            if (request.status >= 200 && request.status < 400) {\n                callback(request.responseText, true);\n            }\n            else {\n                callback(`Server error (${request.status}) when loading \"${url}\"`, false);\n            }\n        };\n        request.onerror = function () {\n            callback(`Unknown network error`, false);\n        };\n        request.send();\n    }\n}\nUtil._warnLevel = \"mute\";\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Line } from \"./Op\";\nexport class Vec {\n    static add(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b[i] || 0;\n        }\n        return a;\n    }\n    static subtract(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b[i] || 0;\n        }\n        return a;\n    }\n    static multiply(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise multiply since the array lengths don't match: ${a.toString()} multiply-with ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b[i];\n        }\n        return a;\n    }\n    static divide(a, b) {\n        if (typeof b == \"number\") {\n            if (b === 0)\n                throw new Error(\"Cannot divide by zero\");\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise divide since the array lengths don't match. ${a.toString()} divide-by ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b[i];\n        }\n        return a;\n    }\n    static dot(a, b) {\n        if (a.length != b.length)\n            throw new Error(\"Array lengths don't match\");\n        let d = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            d += a[i] * b[i];\n        }\n        return d;\n    }\n    static cross2D(a, b) {\n        return a[0] * b[1] - a[1] * b[0];\n    }\n    static cross(a, b) {\n        return new Pt((a[1] * b[2] - a[2] * b[1]), (a[2] * b[0] - a[0] * b[2]), (a[0] * b[1] - a[1] * b[0]));\n    }\n    static magnitude(a) {\n        return Math.sqrt(Vec.dot(a, a));\n    }\n    static unit(a, magnitude = undefined) {\n        let m = (magnitude === undefined) ? Vec.magnitude(a) : magnitude;\n        if (m === 0)\n            throw new Error(\"Cannot calculate unit vector because magnitude is 0\");\n        return Vec.divide(a, m);\n    }\n    static abs(a) {\n        return Vec.map(a, Math.abs);\n    }\n    static floor(a) {\n        return Vec.map(a, Math.floor);\n    }\n    static ceil(a) {\n        return Vec.map(a, Math.ceil);\n    }\n    static round(a) {\n        return Vec.map(a, Math.round);\n    }\n    static max(a) {\n        let m = Number.MIN_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.max(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static min(a) {\n        let m = Number.MAX_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.min(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static sum(a) {\n        let s = 0;\n        for (let i = 0, len = a.length; i < len; i++)\n            s += a[i];\n        return s;\n    }\n    static map(a, fn) {\n        for (let i = 0, len = a.length; i < len; i++) {\n            a[i] = fn(a[i], i, a);\n        }\n        return a;\n    }\n}\nexport class Mat {\n    static add(a, b) {\n        if (typeof b != \"number\") {\n            if (a[0].length != b[0].length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n            if (a.length != b.length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n        }\n        let g = new Group();\n        let isNum = typeof b == \"number\";\n        for (let i = 0, len = a.length; i < len; i++) {\n            g.push(a[i].$add((isNum) ? b : b[i]));\n        }\n        return g;\n    }\n    static multiply(a, b, transposed = false, elementwise = false) {\n        let g = new Group();\n        if (typeof b != \"number\") {\n            if (elementwise) {\n                if (a.length != b.length)\n                    throw new Error(\"Cannot multiply matrix element-wise because the matrices' sizes don't match.\");\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    g.push(a[ai].$multiply(b[ai]));\n                }\n            }\n            else {\n                if (!transposed && a[0].length != b.length)\n                    throw new Error(\"Cannot multiply matrix if rows in matrix-a don't match columns in matrix-b.\");\n                if (transposed && a[0].length != b[0].length)\n                    throw new Error(\"Cannot multiply matrix if transposed and the columns in both matrices don't match.\");\n                if (!transposed)\n                    b = Mat.transpose(b);\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    let p = Pt.make(b.length, 0);\n                    for (let bi = 0, blen = b.length; bi < blen; bi++) {\n                        p[bi] = Vec.dot(a[ai], b[bi]);\n                    }\n                    g.push(p);\n                }\n            }\n        }\n        else {\n            for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                g.push(a[ai].$multiply(b));\n            }\n        }\n        return g;\n    }\n    static zipSlice(g, index, defaultValue = false) {\n        let z = [];\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (g[i].length - 1 < index && defaultValue === false)\n                throw `Index ${index} is out of bounds`;\n            z.push(g[i][index] || defaultValue);\n        }\n        return new Pt(z);\n    }\n    static zip(g, defaultValue = false, useLongest = false) {\n        let ps = new Group();\n        let len = (useLongest) ? g.reduce((a, b) => Math.max(a, b.length), 0) : g[0].length;\n        for (let i = 0; i < len; i++) {\n            ps.push(Mat.zipSlice(g, i, defaultValue));\n        }\n        return ps;\n    }\n    static transpose(g, defaultValue = false, useLongest = false) {\n        return Mat.zip(g, defaultValue, useLongest);\n    }\n    static transform2D(pt, m) {\n        let x = pt[0] * m[0][0] + pt[1] * m[1][0] + m[2][0];\n        let y = pt[0] * m[0][1] + pt[1] * m[1][1] + m[2][1];\n        return new Pt(x, y);\n    }\n    static scale2DMatrix(x, y) {\n        return new Group(new Pt(x, 0, 0), new Pt(0, y, 0), new Pt(0, 0, 1));\n    }\n    static rotate2DMatrix(cosA, sinA) {\n        return new Group(new Pt(cosA, sinA, 0), new Pt(-sinA, cosA, 0), new Pt(0, 0, 1));\n    }\n    static shear2DMatrix(tanX, tanY) {\n        return new Group(new Pt(1, tanX, 0), new Pt(tanY, 1, 0), new Pt(0, 0, 1));\n    }\n    static translate2DMatrix(x, y) {\n        return new Group(new Pt(1, 0, 0), new Pt(0, 1, 0), new Pt(x, y, 1));\n    }\n    static scaleAt2DMatrix(sx, sy, at) {\n        let m = Mat.scale2DMatrix(sx, sy);\n        m[2][0] = -at[0] * sx + at[0];\n        m[2][1] = -at[1] * sy + at[1];\n        return m;\n    }\n    static rotateAt2DMatrix(cosA, sinA, at) {\n        let m = Mat.rotate2DMatrix(cosA, sinA);\n        m[2][0] = at[0] * (1 - cosA) + at[1] * sinA;\n        m[2][1] = at[1] * (1 - cosA) - at[0] * sinA;\n        return m;\n    }\n    static shearAt2DMatrix(tanX, tanY, at) {\n        let m = Mat.shear2DMatrix(tanX, tanY);\n        m[2][0] = -at[1] * tanY;\n        m[2][1] = -at[0] * tanX;\n        return m;\n    }\n    static reflectAt2DMatrix(p1, p2) {\n        let intercept = Line.intercept(p1, p2);\n        if (intercept == undefined) {\n            return [\n                new Pt([-1, 0, 0]),\n                new Pt([0, 1, 0]),\n                new Pt([p1[0] + p2[0], 0, 1])\n            ];\n        }\n        else {\n            let yi = intercept.yi;\n            let ang2 = Math.atan(intercept.slope) * 2;\n            let cosA = Math.cos(ang2);\n            let sinA = Math.sin(ang2);\n            return [\n                new Pt([cosA, sinA, 0]),\n                new Pt([sinA, -cosA, 0]),\n                new Pt([-yi * sinA, yi + yi * cosA, 1])\n            ];\n        }\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Util } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Pt, Group } from \"./Pt\";\nimport { Mat } from \"./LinearAlgebra\";\nlet _errorLength = (obj, param = \"expected\") => Util.warn(\"Group's length is less than \" + param, obj);\nlet _errorOutofBound = (obj, param = \"\") => Util.warn(`Index ${param} is out of bound in Group`, obj);\nexport class Line {\n    static fromAngle(anchor, angle, magnitude) {\n        let g = new Group(new Pt(anchor), new Pt(anchor));\n        g[1].toAngle(angle, magnitude, true);\n        return g;\n    }\n    static slope(p1, p2) {\n        return (p2[0] - p1[0] === 0) ? undefined : (p2[1] - p1[1]) / (p2[0] - p1[0]);\n    }\n    static intercept(p1, p2) {\n        if (p2[0] - p1[0] === 0) {\n            return undefined;\n        }\n        else {\n            let m = (p2[1] - p1[1]) / (p2[0] - p1[0]);\n            let c = p1[1] - m * p1[0];\n            return { slope: m, yi: c, xi: (m === 0) ? undefined : -c / m };\n        }\n    }\n    static sideOfPt2D(line, pt) {\n        return (line[1][0] - line[0][0]) * (pt[1] - line[0][1]) - (pt[0] - line[0][0]) * (line[1][1] - line[0][1]);\n    }\n    static collinear(p1, p2, p3, threshold = 0.01) {\n        let a = new Pt(0, 0, 0).to(p1).$subtract(p2);\n        let b = new Pt(0, 0, 0).to(p1).$subtract(p3);\n        return a.$cross(b).divide(1000).equals(new Pt(0, 0, 0), threshold);\n    }\n    static magnitude(line) {\n        return (line.length >= 2) ? line[1].$subtract(line[0]).magnitude() : 0;\n    }\n    static magnitudeSq(line) {\n        return (line.length >= 2) ? line[1].$subtract(line[0]).magnitudeSq() : 0;\n    }\n    static perpendicularFromPt(line, pt, asProjection = false) {\n        if (line[0].equals(line[1]))\n            return undefined;\n        let a = line[0].$subtract(line[1]);\n        let b = line[1].$subtract(pt);\n        let proj = b.$subtract(a.$project(b));\n        return (asProjection) ? proj : proj.$add(pt);\n    }\n    static distanceFromPt(line, pt) {\n        return Line.perpendicularFromPt(line, pt, true).magnitude();\n    }\n    static intersectRay2D(la, lb) {\n        let a = Line.intercept(la[0], la[1]);\n        let b = Line.intercept(lb[0], lb[1]);\n        let pa = la[0];\n        let pb = lb[0];\n        if (a == undefined) {\n            if (b == undefined)\n                return undefined;\n            let y1 = -b.slope * (pb[0] - pa[0]) + pb[1];\n            return new Pt(pa[0], y1);\n        }\n        else {\n            if (b == undefined) {\n                let y1 = -a.slope * (pa[0] - pb[0]) + pa[1];\n                return new Pt(pb[0], y1);\n            }\n            else if (b.slope != a.slope) {\n                let px = (a.slope * pa[0] - b.slope * pb[0] + pb[1] - pa[1]) / (a.slope - b.slope);\n                let py = a.slope * (px - pa[0]) + pa[1];\n                return new Pt(px, py);\n            }\n            else {\n                if (a.yi == b.yi) {\n                    return new Pt(pa[0], pa[1]);\n                }\n                else {\n                    return undefined;\n                }\n            }\n        }\n    }\n    static intersectLine2D(la, lb) {\n        let pt = Line.intersectRay2D(la, lb);\n        return (pt && Geom.withinBound(pt, la[0], la[1]) && Geom.withinBound(pt, lb[0], lb[1])) ? pt : undefined;\n    }\n    static intersectLineWithRay2D(line, ray) {\n        let pt = Line.intersectRay2D(line, ray);\n        return (pt && Geom.withinBound(pt, line[0], line[1])) ? pt : undefined;\n    }\n    static intersectPolygon2D(lineOrRay, poly, sourceIsRay = false) {\n        let fn = sourceIsRay ? Line.intersectLineWithRay2D : Line.intersectLine2D;\n        let pts = new Group();\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let next = (i === len - 1) ? 0 : i + 1;\n            let d = fn([poly[i], poly[next]], lineOrRay);\n            if (d)\n                pts.push(d);\n        }\n        return (pts.length > 0) ? pts : undefined;\n    }\n    static intersectLines2D(lines1, lines2, isRay = false) {\n        let group = new Group();\n        let fn = isRay ? Line.intersectLineWithRay2D : Line.intersectLine2D;\n        for (let i = 0, len = lines1.length; i < len; i++) {\n            for (let k = 0, lenk = lines2.length; k < lenk; k++) {\n                let _ip = fn(lines1[i], lines2[k]);\n                if (_ip)\n                    group.push(_ip);\n            }\n        }\n        return group;\n    }\n    static intersectGridWithRay2D(ray, gridPt) {\n        let t = Line.intercept(new Pt(ray[0]).subtract(gridPt), new Pt(ray[1]).subtract(gridPt));\n        let g = new Group();\n        if (t && t.xi)\n            g.push(new Pt(gridPt[0] + t.xi, gridPt[1]));\n        if (t && t.yi)\n            g.push(new Pt(gridPt[0], gridPt[1] + t.yi));\n        return g;\n    }\n    static intersectGridWithLine2D(line, gridPt) {\n        let g = Line.intersectGridWithRay2D(line, gridPt);\n        let gg = new Group();\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (Geom.withinBound(g[i], line[0], line[1]))\n                gg.push(g[i]);\n        }\n        return gg;\n    }\n    static intersectRect2D(line, rect) {\n        let box = Geom.boundingBox(Group.fromPtArray(line));\n        if (!Rectangle.hasIntersectRect2D(box, rect))\n            return new Group();\n        return Line.intersectLines2D([line], Rectangle.sides(rect));\n    }\n    static subpoints(line, num) {\n        let pts = new Group();\n        for (let i = 1; i <= num; i++) {\n            pts.push(Geom.interpolate(line[0], line[1], i / (num + 1)));\n        }\n        return pts;\n    }\n    static crop(line, size, index = 0, cropAsCircle = true) {\n        let tdx = (index === 0) ? 1 : 0;\n        let ls = line[tdx].$subtract(line[index]);\n        if (ls[0] === 0 || size[0] === 0)\n            return line[index];\n        if (cropAsCircle) {\n            let d = ls.unit().multiply(size[1]);\n            return line[index].$add(d);\n        }\n        else {\n            let rect = Rectangle.fromCenter(line[index], size);\n            let sides = Rectangle.sides(rect);\n            let sideIdx = 0;\n            if (Math.abs(ls[1] / ls[0]) > Math.abs(size[1] / size[0])) {\n                sideIdx = (ls[1] < 0) ? 0 : 2;\n            }\n            else {\n                sideIdx = (ls[0] < 0) ? 3 : 1;\n            }\n            return Line.intersectRay2D(sides[sideIdx], line);\n        }\n    }\n    static marker(line, size, graphic = (\"arrow\" || \"line\"), atTail = true) {\n        let h = atTail ? 0 : 1;\n        let t = atTail ? 1 : 0;\n        let unit = line[h].$subtract(line[t]);\n        if (unit.magnitudeSq() === 0)\n            return new Group();\n        unit.unit();\n        let ps = Geom.perpendicular(unit).multiply(size[0]).add(line[t]);\n        if (graphic == \"arrow\") {\n            ps.add(unit.$multiply(size[1]));\n            return new Group(line[t], ps[0], ps[1]);\n        }\n        else {\n            return new Group(ps[0], ps[1]);\n        }\n    }\n    static toRect(line) {\n        return new Group(line[0].$min(line[1]), line[0].$max(line[1]));\n    }\n}\nexport class Rectangle {\n    static from(topLeft, widthOrSize, height) {\n        return Rectangle.fromTopLeft(topLeft, widthOrSize, height);\n    }\n    static fromTopLeft(topLeft, widthOrSize, height) {\n        let size = (typeof widthOrSize == \"number\") ? [widthOrSize, (height || widthOrSize)] : widthOrSize;\n        return new Group(new Pt(topLeft), new Pt(topLeft).add(size));\n    }\n    static fromCenter(center, widthOrSize, height) {\n        let half = (typeof widthOrSize == \"number\") ? [widthOrSize / 2, (height || widthOrSize) / 2] : new Pt(widthOrSize).divide(2);\n        return new Group(new Pt(center).subtract(half), new Pt(center).add(half));\n    }\n    static toCircle(pts, within = true) {\n        return Circle.fromRect(pts, within);\n    }\n    static toSquare(pts, enclose = false) {\n        let s = Rectangle.size(pts);\n        let m = (enclose) ? s.maxValue().value : s.minValue().value;\n        return Rectangle.fromCenter(Rectangle.center(pts), m, m);\n    }\n    static size(pts) {\n        return pts[0].$max(pts[1]).subtract(pts[0].$min(pts[1]));\n    }\n    static center(pts) {\n        let min = pts[0].$min(pts[1]);\n        let max = pts[0].$max(pts[1]);\n        return min.add(max.$subtract(min).divide(2));\n    }\n    static corners(rect) {\n        let p0 = rect[0].$min(rect[1]);\n        let p2 = rect[0].$max(rect[1]);\n        return new Group(p0, new Pt(p2.x, p0.y), p2, new Pt(p0.x, p2.y));\n    }\n    static sides(rect) {\n        let [p0, p1, p2, p3] = Rectangle.corners(rect);\n        return [\n            new Group(p0, p1), new Group(p1, p2),\n            new Group(p2, p3), new Group(p3, p0)\n        ];\n    }\n    static boundingBox(rects) {\n        let merged = Util.flatten(rects, false);\n        let min = Pt.make(2, Number.MAX_VALUE);\n        let max = Pt.make(2, Number.MIN_VALUE);\n        for (let i = 0, len = merged.length; i < len; i++) {\n            for (let k = 0; k < 2; k++) {\n                min[k] = Math.min(min[k], merged[i][k]);\n                max[k] = Math.max(max[k], merged[i][k]);\n            }\n        }\n        return new Group(min, max);\n    }\n    static polygon(rect) {\n        return Rectangle.corners(rect);\n    }\n    static quadrants(rect, center) {\n        let corners = Rectangle.corners(rect);\n        let _center = (center != undefined) ? new Pt(center) : Rectangle.center(rect);\n        return corners.map((c) => new Group(c, _center).boundingBox());\n    }\n    static halves(rect, ratio = 0.5, asRows = false) {\n        let min = rect[0].$min(rect[1]);\n        let max = rect[0].$max(rect[1]);\n        let mid = (asRows) ? Num.lerp(min[1], max[1], ratio) : Num.lerp(min[0], max[0], ratio);\n        return (asRows)\n            ? [new Group(min, new Pt(max[0], mid)), new Group(new Pt(min[0], mid), max)]\n            : [new Group(min, new Pt(mid, max[1])), new Group(new Pt(mid, min[1]), max)];\n    }\n    static withinBound(rect, pt) {\n        return Geom.withinBound(pt, rect[0], rect[1]);\n    }\n    static hasIntersectRect2D(rect1, rect2, resetBoundingBox = false) {\n        if (resetBoundingBox) {\n            rect1 = Geom.boundingBox(rect1);\n            rect2 = Geom.boundingBox(rect2);\n        }\n        if (rect1[0][0] > rect2[1][0] || rect2[0][0] > rect1[1][0])\n            return false;\n        if (rect1[0][1] > rect2[1][1] || rect2[0][1] > rect1[1][1])\n            return false;\n        return true;\n    }\n    static intersectRect2D(rect1, rect2) {\n        if (!Rectangle.hasIntersectRect2D(rect1, rect2))\n            return new Group();\n        return Line.intersectLines2D(Rectangle.sides(rect1), Rectangle.sides(rect2));\n    }\n}\nexport class Circle {\n    static fromRect(pts, enclose = false) {\n        let r = 0;\n        let min = r = Rectangle.size(pts).minValue().value / 2;\n        if (enclose) {\n            let max = Rectangle.size(pts).maxValue().value / 2;\n            r = Math.sqrt(min * min + max * max);\n        }\n        else {\n            r = min;\n        }\n        return new Group(Rectangle.center(pts), new Pt(r, r));\n    }\n    static fromTriangle(pts, enclose = false) {\n        if (enclose) {\n            return Triangle.circumcircle(pts);\n        }\n        else {\n            return Triangle.incircle(pts);\n        }\n    }\n    static fromCenter(pt, radius) {\n        return new Group(new Pt(pt), new Pt(radius, radius));\n    }\n    static withinBound(pts, pt, threshold = 0) {\n        let d = pts[0].$subtract(pt);\n        return d.dot(d) + threshold < pts[1].x * pts[1].x;\n    }\n    static intersectRay2D(pts, ray) {\n        let d = ray[0].$subtract(ray[1]);\n        let f = pts[0].$subtract(ray[0]);\n        let a = d.dot(d);\n        let b = f.dot(d);\n        let c = f.dot(f) - pts[1].x * pts[1].x;\n        let p = b / a;\n        let q = c / a;\n        let disc = p * p - q;\n        if (disc < 0) {\n            return new Group();\n        }\n        else {\n            let discSqrt = Math.sqrt(disc);\n            let t1 = -p + discSqrt;\n            let p1 = ray[0].$subtract(d.$multiply(t1));\n            if (disc === 0)\n                return new Group(p1);\n            let t2 = -p - discSqrt;\n            let p2 = ray[0].$subtract(d.$multiply(t2));\n            return new Group(p1, p2);\n        }\n    }\n    static intersectLine2D(pts, line) {\n        let ps = Circle.intersectRay2D(pts, line);\n        let g = new Group();\n        if (ps.length > 0) {\n            for (let i = 0, len = ps.length; i < len; i++) {\n                if (Rectangle.withinBound(line, ps[i]))\n                    g.push(ps[i]);\n            }\n        }\n        return g;\n    }\n    static intersectCircle2D(pts, circle) {\n        let dv = circle[0].$subtract(pts[0]);\n        let dr2 = dv.magnitudeSq();\n        let dr = Math.sqrt(dr2);\n        let ar = pts[1].x;\n        let br = circle[1].x;\n        let ar2 = ar * ar;\n        let br2 = br * br;\n        if (dr > ar + br) {\n            return new Group();\n        }\n        else if (dr < Math.abs(ar - br)) {\n            return new Group(pts[0].clone());\n        }\n        else {\n            let a = (ar2 - br2 + dr2) / (2 * dr);\n            let h = Math.sqrt(ar2 - a * a);\n            let p = dv.$multiply(a / dr).add(pts[0]);\n            return new Group(new Pt(p.x + h * dv.y / dr, p.y - h * dv.x / dr), new Pt(p.x - h * dv.y / dr, p.y + h * dv.x / dr));\n        }\n    }\n    static intersectRect2D(pts, rect) {\n        let sides = Rectangle.sides(rect);\n        let g = [];\n        for (let i = 0, len = sides.length; i < len; i++) {\n            let ps = Circle.intersectLine2D(pts, sides[i]);\n            if (ps.length > 0)\n                g.push(ps);\n        }\n        return Util.flatten(g);\n    }\n    static toRect(pts, within = false) {\n        let r = pts[1][0];\n        if (within) {\n            let half = Math.sqrt(r * r) / 2;\n            return new Group(pts[0].$subtract(half), pts[0].$add(half));\n        }\n        else {\n            return new Group(pts[0].$subtract(r), pts[0].$add(r));\n        }\n    }\n    static toTriangle(pts, within = true) {\n        if (within) {\n            let ang = -Math.PI / 2;\n            let inc = Math.PI * 2 / 3;\n            let g = new Group();\n            for (let i = 0; i < 3; i++) {\n                g.push(pts[0].clone().toAngle(ang, pts[1][0], true));\n                ang += inc;\n            }\n            return g;\n        }\n        else {\n            return Triangle.fromCenter(pts[0], pts[1][0]);\n        }\n    }\n}\nexport class Triangle {\n    static fromRect(rect) {\n        let top = rect[0].$add(rect[1]).divide(2);\n        top.y = rect[0][1];\n        let left = rect[1].clone();\n        left.x = rect[0][0];\n        return new Group(top, rect[1].clone(), left);\n    }\n    static fromCircle(circle) {\n        return Circle.toTriangle(circle, true);\n    }\n    static fromCenter(pt, size) {\n        return Triangle.fromCircle(Circle.fromCenter(pt, size));\n    }\n    static medial(pts) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        return Polygon.midpoints(pts, true);\n    }\n    static oppositeSide(pts, index) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        if (index === 0) {\n            return Group.fromPtArray([pts[1], pts[2]]);\n        }\n        else if (index === 1) {\n            return Group.fromPtArray([pts[0], pts[2]]);\n        }\n        else {\n            return Group.fromPtArray([pts[0], pts[1]]);\n        }\n    }\n    static altitude(pts, index) {\n        let opp = Triangle.oppositeSide(pts, index);\n        if (opp.length > 1) {\n            return new Group(pts[index], Line.perpendicularFromPt(opp, pts[index]));\n        }\n        else {\n            return new Group();\n        }\n    }\n    static orthocenter(pts) {\n        if (pts.length < 3)\n            return _errorLength(undefined, 3);\n        let a = Triangle.altitude(pts, 0);\n        let b = Triangle.altitude(pts, 1);\n        return Line.intersectRay2D(a, b);\n    }\n    static incenter(pts) {\n        if (pts.length < 3)\n            return _errorLength(undefined, 3);\n        let a = Polygon.bisector(pts, 0).add(pts[0]);\n        let b = Polygon.bisector(pts, 1).add(pts[1]);\n        return Line.intersectRay2D(new Group(pts[0], a), new Group(pts[1], b));\n    }\n    static incircle(pts, center) {\n        let c = (center) ? center : Triangle.incenter(pts);\n        let area = Polygon.area(pts);\n        let perim = Polygon.perimeter(pts, true);\n        let r = 2 * area / perim.total;\n        return Circle.fromCenter(c, r);\n    }\n    static circumcenter(pts) {\n        let md = Triangle.medial(pts);\n        let a = [md[0], Geom.perpendicular(pts[0].$subtract(md[0])).p1.$add(md[0])];\n        let b = [md[1], Geom.perpendicular(pts[1].$subtract(md[1])).p1.$add(md[1])];\n        return Line.intersectRay2D(a, b);\n    }\n    static circumcircle(pts, center) {\n        let c = (center) ? center : Triangle.circumcenter(pts);\n        let r = pts[0].$subtract(c).magnitude();\n        return Circle.fromCenter(c, r);\n    }\n}\nexport class Polygon {\n    static centroid(pts) {\n        return Geom.centroid(pts);\n    }\n    static rectangle(center, widthOrSize, height) {\n        return Rectangle.corners(Rectangle.fromCenter(center, widthOrSize, height));\n    }\n    static fromCenter(center, radius, sides) {\n        let g = new Group();\n        for (let i = 0; i < sides; i++) {\n            let ang = Math.PI * 2 * i / sides;\n            g.push(new Pt(Math.cos(ang) * radius, Math.sin(ang) * radius).add(center));\n        }\n        return g;\n    }\n    static lineAt(pts, idx) {\n        if (idx < 0 || idx >= pts.length)\n            throw new Error(\"index out of the Polygon's range\");\n        return new Group(pts[idx], (idx === pts.length - 1) ? pts[0] : pts[idx + 1]);\n    }\n    static lines(pts, closePath = true) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let sp = Util.split(pts, 2, 1);\n        if (closePath)\n            sp.push(new Group(pts[pts.length - 1], pts[0]));\n        return sp.map((g) => g);\n    }\n    static midpoints(pts, closePath = false, t = 0.5) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let sides = Polygon.lines(pts, closePath);\n        let mids = sides.map((s) => Geom.interpolate(s[0], s[1], t));\n        return mids;\n    }\n    static adjacentSides(pts, index, closePath = false) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        if (index < 0 || index >= pts.length)\n            return _errorOutofBound(new Group(), index);\n        let gs = [];\n        let left = index - 1;\n        if (closePath && left < 0)\n            left = pts.length - 1;\n        if (left >= 0)\n            gs.push(new Group(pts[index], pts[left]));\n        let right = index + 1;\n        if (closePath && right > pts.length - 1)\n            right = 0;\n        if (right <= pts.length - 1)\n            gs.push(new Group(pts[index], pts[right]));\n        return gs;\n    }\n    static bisector(pts, index) {\n        let sides = Polygon.adjacentSides(pts, index, true);\n        if (sides.length >= 2) {\n            let a = sides[0][1].$subtract(sides[0][0]).unit();\n            let b = sides[1][1].$subtract(sides[1][0]).unit();\n            return a.add(b).divide(2);\n        }\n        else {\n            return undefined;\n        }\n    }\n    static perimeter(pts, closePath = false) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let lines = Polygon.lines(pts, closePath);\n        let mag = 0;\n        let p = Pt.make(lines.length, 0);\n        for (let i = 0, len = lines.length; i < len; i++) {\n            let m = Line.magnitude(lines[i]);\n            mag += m;\n            p[i] = m;\n        }\n        return {\n            total: mag,\n            segments: p\n        };\n    }\n    static area(pts) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        let det = (a, b) => a[0] * b[1] - a[1] * b[0];\n        let area = 0;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (i < pts.length - 1) {\n                area += det(pts[i], pts[i + 1]);\n            }\n            else {\n                area += det(pts[i], pts[0]);\n            }\n        }\n        return Math.abs(area / 2);\n    }\n    static convexHull(pts, sorted = false) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        if (!sorted) {\n            pts = pts.slice();\n            pts.sort((a, b) => a[0] - b[0]);\n        }\n        let left = (a, b, c) => {\n            return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]) > 0;\n        };\n        let dq = [];\n        let bot = pts.length - 2;\n        let top = bot + 3;\n        dq[bot] = pts[2];\n        dq[top] = pts[2];\n        if (left(pts[0], pts[1], pts[2])) {\n            dq[bot + 1] = pts[0];\n            dq[bot + 2] = pts[1];\n        }\n        else {\n            dq[bot + 1] = pts[1];\n            dq[bot + 2] = pts[0];\n        }\n        for (let i = 3, len = pts.length; i < len; i++) {\n            let pt = pts[i];\n            if (left(dq[bot], dq[bot + 1], pt) && left(dq[top - 1], dq[top], pt)) {\n                continue;\n            }\n            while (!left(dq[bot], dq[bot + 1], pt)) {\n                bot += 1;\n            }\n            bot -= 1;\n            dq[bot] = pt;\n            while (!left(dq[top - 1], dq[top], pt)) {\n                top -= 1;\n            }\n            top += 1;\n            dq[top] = pt;\n        }\n        let hull = new Group();\n        for (let h = 0; h < (top - bot); h++) {\n            hull.push(dq[bot + h]);\n        }\n        return hull;\n    }\n    static network(pts, originIndex = 0) {\n        let g = [];\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (i != originIndex)\n                g.push(new Group(pts[originIndex], pts[i]));\n        }\n        return g;\n    }\n    static nearestPt(pts, pt) {\n        let _near = Number.MAX_VALUE;\n        let _item = -1;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let d = pts[i].$subtract(pt).magnitudeSq();\n            if (d < _near) {\n                _near = d;\n                _item = i;\n            }\n        }\n        return _item;\n    }\n    static projectAxis(poly, unitAxis) {\n        let dot = unitAxis.dot(poly[0]);\n        let d = new Pt(dot, dot);\n        for (let n = 1, len = poly.length; n < len; n++) {\n            dot = unitAxis.dot(poly[n]);\n            d = new Pt(Math.min(dot, d[0]), Math.max(dot, d[1]));\n        }\n        return d;\n    }\n    static _axisOverlap(poly1, poly2, unitAxis) {\n        let pa = Polygon.projectAxis(poly1, unitAxis);\n        let pb = Polygon.projectAxis(poly2, unitAxis);\n        return (pa[0] < pb[0]) ? pb[0] - pa[1] : pa[0] - pb[1];\n    }\n    static hasIntersectPoint(poly, pt) {\n        let c = false;\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let ln = Polygon.lineAt(poly, i);\n            if (((ln[0][1] > pt[1]) != (ln[1][1] > pt[1])) &&\n                (pt[0] < (ln[1][0] - ln[0][0]) * (pt[1] - ln[0][1]) / (ln[1][1] - ln[0][1]) + ln[0][0])) {\n                c = !c;\n            }\n        }\n        return c;\n    }\n    static hasIntersectCircle(poly, circle) {\n        let info = {\n            which: -1,\n            dist: 0,\n            normal: null,\n            edge: null,\n            vertex: null,\n        };\n        let c = circle[0];\n        let r = circle[1][0];\n        let minDist = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let edge = Polygon.lineAt(poly, i);\n            let axis = new Pt(edge[0].y - edge[1].y, edge[1].x - edge[0].x).unit();\n            let poly2 = new Group(c.$add(axis.$multiply(r)), c.$subtract(axis.$multiply(r)));\n            let dist = Polygon._axisOverlap(poly, poly2, axis);\n            if (dist > 0) {\n                return null;\n            }\n            else if (Math.abs(dist) < minDist) {\n                let check = Rectangle.withinBound(edge, Line.perpendicularFromPt(edge, c)) || Circle.intersectLine2D(circle, edge).length > 0;\n                if (check) {\n                    info.edge = edge;\n                    info.normal = axis;\n                    minDist = Math.abs(dist);\n                    info.which = i;\n                }\n            }\n        }\n        if (!info.edge)\n            return null;\n        let dir = c.$subtract(Polygon.centroid(poly)).dot(info.normal);\n        if (dir < 0)\n            info.normal.multiply(-1);\n        info.dist = minDist;\n        info.vertex = c;\n        return info;\n    }\n    static hasIntersectPolygon(poly1, poly2) {\n        let info = {\n            which: -1,\n            dist: 0,\n            normal: new Pt(),\n            edge: new Group(),\n            vertex: new Pt()\n        };\n        let minDist = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, plen = (poly1.length + poly2.length); i < plen; i++) {\n            let edge = (i < poly1.length) ? Polygon.lineAt(poly1, i) : Polygon.lineAt(poly2, i - poly1.length);\n            let axis = new Pt(edge[0].y - edge[1].y, edge[1].x - edge[0].x).unit();\n            let dist = Polygon._axisOverlap(poly1, poly2, axis);\n            if (dist > 0) {\n                return null;\n            }\n            else if (Math.abs(dist) < minDist) {\n                info.edge = edge;\n                info.normal = axis;\n                minDist = Math.abs(dist);\n                info.which = (i < poly1.length) ? 0 : 1;\n            }\n        }\n        info.dist = minDist;\n        let b1 = (info.which === 0) ? poly2 : poly1;\n        let b2 = (info.which === 0) ? poly1 : poly2;\n        let c1 = Polygon.centroid(b1);\n        let c2 = Polygon.centroid(b2);\n        let dir = c1.$subtract(c2).dot(info.normal);\n        if (dir < 0)\n            info.normal.multiply(-1);\n        let smallest = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, len = b1.length; i < len; i++) {\n            let d = info.normal.dot(b1[i].$subtract(c2));\n            if (d < smallest) {\n                smallest = d;\n                info.vertex = b1[i];\n            }\n        }\n        return info;\n    }\n    static intersectPolygon2D(poly1, poly2) {\n        let lp = Polygon.lines(poly1);\n        let g = [];\n        for (let i = 0, len = lp.length; i < len; i++) {\n            let ins = Line.intersectPolygon2D(lp[i], poly2, false);\n            if (ins)\n                g.push(ins);\n        }\n        return Util.flatten(g, true);\n    }\n    static toRects(polys) {\n        let boxes = polys.map((g) => Geom.boundingBox(g));\n        let merged = Util.flatten(boxes, false);\n        boxes.unshift(Geom.boundingBox(merged));\n        return boxes;\n    }\n}\nexport class Curve {\n    static getSteps(steps) {\n        let ts = new Group();\n        for (let i = 0; i <= steps; i++) {\n            let t = i / steps;\n            ts.push(new Pt(t * t * t, t * t, t, 1));\n        }\n        return ts;\n    }\n    static controlPoints(pts, index = 0, copyStart = false) {\n        if (index > pts.length - 1)\n            return new Group();\n        let _index = (i) => (i < pts.length - 1) ? i : pts.length - 1;\n        let p0 = pts[index];\n        index = (copyStart) ? index : index + 1;\n        return new Group(p0, pts[_index(index++)], pts[_index(index++)], pts[_index(index++)]);\n    }\n    static _calcPt(ctrls, params) {\n        let x = ctrls.reduce((a, c, i) => a + c.x * params[i], 0);\n        let y = ctrls.reduce((a, c, i) => a + c.y * params[i], 0);\n        if (ctrls[0].length > 2) {\n            let z = ctrls.reduce((a, c, i) => a + c.z * params[i], 0);\n            return new Pt(x, y, z);\n        }\n        return new Pt(x, y);\n    }\n    static catmullRom(pts, steps = 10) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let c = Curve.controlPoints(pts, 0, true);\n        for (let i = 0; i <= steps; i++) {\n            ps.push(Curve.catmullRomStep(ts[i], c));\n        }\n        let k = 0;\n        while (k < pts.length - 2) {\n            let cp = Curve.controlPoints(pts, k);\n            if (cp.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.catmullRomStep(ts[i], cp));\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static catmullRomStep(step, ctrls) {\n        let m = new Group(new Pt(-0.5, 1, -0.5, 0), new Pt(1.5, -2.5, 0, 1), new Pt(-1.5, 2, 0.5, 0), new Pt(0.5, -0.5, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static cardinal(pts, steps = 10, tension = 0.5) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let c = Curve.controlPoints(pts, 0, true);\n        for (let i = 0; i <= steps; i++) {\n            ps.push(Curve.cardinalStep(ts[i], c, tension));\n        }\n        let k = 0;\n        while (k < pts.length - 2) {\n            let cp = Curve.controlPoints(pts, k);\n            if (cp.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.cardinalStep(ts[i], cp, tension));\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static cardinalStep(step, ctrls, tension = 0.5) {\n        let m = new Group(new Pt(-1, 2, -1, 0), new Pt(-1, 1, 0, 0), new Pt(1, -2, 1, 0), new Pt(1, -1, 0, 0));\n        let h = Mat.multiply([step], m, true)[0].multiply(tension);\n        let h2 = (2 * step[0] - 3 * step[1] + 1);\n        let h3 = -2 * step[0] + 3 * step[1];\n        let pt = Curve._calcPt(ctrls, h);\n        pt.x += h2 * ctrls[1].x + h3 * ctrls[2].x;\n        pt.y += h2 * ctrls[1].y + h3 * ctrls[2].y;\n        if (pt.length > 2)\n            pt.z += h2 * ctrls[1].z + h3 * ctrls[2].z;\n        return pt;\n    }\n    static bezier(pts, steps = 10) {\n        if (pts.length < 4)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let k = 0;\n        while (k < pts.length - 3) {\n            let c = Curve.controlPoints(pts, k);\n            if (c.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.bezierStep(ts[i], c));\n                }\n                k += 3;\n            }\n        }\n        return ps;\n    }\n    static bezierStep(step, ctrls) {\n        let m = new Group(new Pt(-1, 3, -3, 1), new Pt(3, -6, 3, 0), new Pt(-3, 3, 0, 0), new Pt(1, 0, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static bspline(pts, steps = 10, tension = 1) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let k = 0;\n        while (k < pts.length - 3) {\n            let c = Curve.controlPoints(pts, k);\n            if (c.length > 0) {\n                if (tension !== 1) {\n                    for (let i = 0; i <= steps; i++) {\n                        ps.push(Curve.bsplineTensionStep(ts[i], c, tension));\n                    }\n                }\n                else {\n                    for (let i = 0; i <= steps; i++) {\n                        ps.push(Curve.bsplineStep(ts[i], c));\n                    }\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static bsplineStep(step, ctrls) {\n        let m = new Group(new Pt(-0.16666666666666666, 0.5, -0.5, 0.16666666666666666), new Pt(0.5, -1, 0, 0.6666666666666666), new Pt(-0.5, 0.5, 0.5, 0.16666666666666666), new Pt(0.16666666666666666, 0, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static bsplineTensionStep(step, ctrls, tension = 1) {\n        let m = new Group(new Pt(-0.16666666666666666, 0.5, -0.5, 0.16666666666666666), new Pt(-1.5, 2, 0, -0.3333333333333333), new Pt(1.5, -2.5, 0.5, 0.16666666666666666), new Pt(0.16666666666666666, 0, 0, 0));\n        let h = Mat.multiply([step], m, true)[0].multiply(tension);\n        let h2 = (2 * step[0] - 3 * step[1] + 1);\n        let h3 = -2 * step[0] + 3 * step[1];\n        let pt = Curve._calcPt(ctrls, h);\n        pt.x += h2 * ctrls[1].x + h3 * ctrls[2].x;\n        pt.y += h2 * ctrls[1].y + h3 * ctrls[2].y;\n        if (pt.length > 2)\n            pt.z += h2 * ctrls[1].z + h3 * ctrls[2].z;\n        return pt;\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Const } from \"./Util\";\nimport { Curve } from \"./Op\";\nimport { Pt, Group } from \"./Pt\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Num {\n    static equals(a, b, threshold = 0.00001) {\n        return Math.abs(a - b) < threshold;\n    }\n    static lerp(a, b, t) {\n        return (1 - t) * a + t * b;\n    }\n    static clamp(val, min, max) {\n        return Math.max(min, Math.min(max, val));\n    }\n    static boundValue(val, min, max) {\n        let len = Math.abs(max - min);\n        let a = val % len;\n        if (a > max)\n            a -= len;\n        else if (a < min)\n            a += len;\n        return a;\n    }\n    static within(p, a, b) {\n        return p >= Math.min(a, b) && p <= Math.max(a, b);\n    }\n    static randomRange(a, b = 0) {\n        let r = (a > b) ? (a - b) : (b - a);\n        return a + Math.random() * r;\n    }\n    static normalizeValue(n, a, b) {\n        let min = Math.min(a, b);\n        let max = Math.max(a, b);\n        return (n - min) / (max - min);\n    }\n    static sum(pts) {\n        let c = new Pt(pts[0]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            Vec.add(c, pts[i]);\n        }\n        return c;\n    }\n    static average(pts) {\n        return Num.sum(pts).divide(pts.length);\n    }\n    static cycle(t) {\n        return (Math.sin(Math.PI * 2 * t) + 1) / 2;\n    }\n    static mapToRange(n, currA, currB, targetA, targetB) {\n        if (currA == currB)\n            throw new Error(\"[currMin, currMax] must define a range that is not zero\");\n        let min = Math.min(targetA, targetB);\n        let max = Math.max(targetA, targetB);\n        return Num.normalizeValue(n, currA, currB) * (max - min) + min;\n    }\n}\nexport class Geom {\n    static boundAngle(angle) {\n        return Num.boundValue(angle, 0, 360);\n    }\n    static boundRadian(radian) {\n        return Num.boundValue(radian, 0, Const.two_pi);\n    }\n    static toRadian(angle) {\n        return angle * Const.deg_to_rad;\n    }\n    static toDegree(radian) {\n        return radian * Const.rad_to_deg;\n    }\n    static boundingBox(pts) {\n        let minPt = pts.reduce((a, p) => a.$min(p));\n        let maxPt = pts.reduce((a, p) => a.$max(p));\n        return new Group(minPt, maxPt);\n    }\n    static centroid(pts) {\n        return Num.average(pts);\n    }\n    static anchor(pts, ptOrIndex = 0, direction = \"to\") {\n        let method = (direction == \"to\") ? \"subtract\" : \"add\";\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (typeof ptOrIndex == \"number\") {\n                if (ptOrIndex !== i)\n                    pts[i][method](pts[ptOrIndex]);\n            }\n            else {\n                pts[i][method](ptOrIndex);\n            }\n        }\n    }\n    static interpolate(a, b, t = 0.5) {\n        let len = Math.min(a.length, b.length);\n        let d = Pt.make(len);\n        for (let i = 0; i < len; i++) {\n            d[i] = a[i] * (1 - t) + b[i] * t;\n        }\n        return d;\n    }\n    static perpendicular(pt, axis = Const.xy) {\n        let y = axis[1];\n        let x = axis[0];\n        let p = new Pt(pt);\n        let pa = new Pt(p);\n        pa[x] = -p[y];\n        pa[y] = p[x];\n        let pb = new Pt(p);\n        pb[x] = p[y];\n        pb[y] = -p[x];\n        return new Group(pa, pb);\n    }\n    static isPerpendicular(p1, p2) {\n        return new Pt(p1).dot(p2) === 0;\n    }\n    static withinBound(pt, boundPt1, boundPt2) {\n        for (let i = 0, len = Math.min(pt.length, boundPt1.length, boundPt2.length); i < len; i++) {\n            if (!Num.within(pt[i], boundPt1[i], boundPt2[i]))\n                return false;\n        }\n        return true;\n    }\n    static sortEdges(pts) {\n        let bounds = Geom.boundingBox(pts);\n        let center = bounds[1].add(bounds[0]).divide(2);\n        let fn = (a, b) => {\n            if (a.length < 2 || b.length < 2)\n                throw new Error(\"Pt dimension cannot be less than 2\");\n            let da = a.$subtract(center);\n            let db = b.$subtract(center);\n            if (da[0] >= 0 && db[0] < 0)\n                return 1;\n            if (da[0] < 0 && db[0] >= 0)\n                return -1;\n            if (da[0] == 0 && db[0] == 0) {\n                if (da[1] >= 0 || db[1] >= 0)\n                    return (da[1] > db[1]) ? 1 : -1;\n                return (db[1] > da[1]) ? 1 : -1;\n            }\n            let det = da.$cross2D(db);\n            if (det < 0)\n                return 1;\n            if (det > 0)\n                return -1;\n            return (da[0] * da[0] + da[1] * da[1] > db[0] * db[0] + db[1] * db[1]) ? 1 : -1;\n        };\n        return pts.sort(fn);\n    }\n    static scale(ps, scale, anchor) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let scs = (typeof scale == \"number\") ? Pt.make(pts[0].length, scale) : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = pts[i];\n            for (let k = 0, lenP = p.length; k < lenP; k++) {\n                p[k] = (anchor && anchor[k]) ? anchor[k] + (p[k] - anchor[k]) * scs[k] : p[k] * scs[k];\n            }\n        }\n        return Geom;\n    }\n    static rotate2D(ps, angle, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let fn = (anchor) ? Mat.rotateAt2DMatrix : Mat.rotate2DMatrix;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(cos, sin, anchor)));\n        }\n        return Geom;\n    }\n    static shear2D(ps, scale, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let s = (typeof scale == \"number\") ? [scale, scale] : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let fn = (anchor) ? Mat.shearAt2DMatrix : Mat.shear2DMatrix;\n        let tanx = Math.tan(s[0]);\n        let tany = Math.tan(s[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(tanx, tany, anchor)));\n        }\n        return Geom;\n    }\n    static reflect2D(ps, line, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let mat = Mat.reflectAt2DMatrix(line[0], line[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, mat));\n        }\n        return Geom;\n    }\n    static cosTable() {\n        let cos = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            cos[i] = Math.cos(i * Math.PI / 180);\n        let find = (rad) => cos[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: cos, cos: find };\n    }\n    static sinTable() {\n        let sin = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            sin[i] = Math.sin(i * Math.PI / 180);\n        let find = (rad) => sin[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: sin, sin: find };\n    }\n}\nexport class Shaping {\n    static linear(t, c = 1) {\n        return c * t;\n    }\n    static quadraticIn(t, c = 1) {\n        return c * t * t;\n    }\n    static quadraticOut(t, c = 1) {\n        return -c * t * (t - 2);\n    }\n    static quadraticInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * t * t * 4 : -c / 2 * ((dt - 1) * (dt - 3) - 1);\n    }\n    static cubicIn(t, c = 1) {\n        return c * t * t * t;\n    }\n    static cubicOut(t, c = 1) {\n        let dt = t - 1;\n        return c * (dt * dt * dt + 1);\n    }\n    static cubicInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * dt * dt * dt : c / 2 * ((dt - 2) * (dt - 2) * (dt - 2) + 2);\n    }\n    static exponentialIn(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, 1 / p);\n    }\n    static exponentialOut(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, p);\n    }\n    static sineIn(t, c = 1) {\n        return -c * Math.cos(t * Const.half_pi) + c;\n    }\n    static sineOut(t, c = 1) {\n        return c * Math.sin(t * Const.half_pi);\n    }\n    static sineInOut(t, c = 1) {\n        return -c / 2 * (Math.cos(Math.PI * t) - 1);\n    }\n    static cosineApprox(t, c = 1) {\n        let t2 = t * t;\n        let t4 = t2 * t2;\n        let t6 = t4 * t2;\n        return c * (4 * t6 / 9 - 17 * t4 / 9 + 22 * t2 / 9);\n    }\n    static circularIn(t, c = 1) {\n        return -c * (Math.sqrt(1 - t * t) - 1);\n    }\n    static circularOut(t, c = 1) {\n        let dt = t - 1;\n        return c * Math.sqrt(1 - dt * dt);\n    }\n    static circularInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? -c / 2 * (Math.sqrt(1 - dt * dt) - 1) : c / 2 * (Math.sqrt(1 - (dt - 2) * (dt - 2)) + 1);\n    }\n    static elasticIn(t, c = 1, p = 0.7) {\n        let dt = t - 1;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (-Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p));\n    }\n    static elasticOut(t, c = 1, p = 0.7) {\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (Math.pow(2, -10 * t) * Math.sin((t - s) * Const.two_pi / p)) + c;\n    }\n    static elasticInOut(t, c = 1, p = 0.6) {\n        let dt = t * 2;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        if (t < 0.5) {\n            dt -= 1;\n            return c * (-0.5 * (Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p)));\n        }\n        else {\n            dt -= 1;\n            return c * (0.5 * (Math.pow(2, -10 * dt) * Math.sin((dt - s) * Const.two_pi / p))) + c;\n        }\n    }\n    static bounceIn(t, c = 1) {\n        return c - Shaping.bounceOut((1 - t), c);\n    }\n    static bounceOut(t, c = 1) {\n        if (t < (1 / 2.75)) {\n            return c * (7.5625 * t * t);\n        }\n        else if (t < (2 / 2.75)) {\n            t -= 1.5 / 2.75;\n            return c * (7.5625 * t * t + 0.75);\n        }\n        else if (t < (2.5 / 2.75)) {\n            t -= 2.25 / 2.75;\n            return c * (7.5625 * t * t + 0.9375);\n        }\n        else {\n            t -= 2.625 / 2.75;\n            return c * (7.5625 * t * t + 0.984375);\n        }\n    }\n    static bounceInOut(t, c = 1) {\n        return (t < 0.5) ? Shaping.bounceIn(t * 2, c) / 2 : Shaping.bounceOut(t * 2 - 1, c) / 2 + c / 2;\n    }\n    static sigmoid(t, c = 1, p = 10) {\n        let d = p * (t - 0.5);\n        return c / (1 + Math.exp(-d));\n    }\n    static logSigmoid(t, c = 1, p = 0.7) {\n        p = Math.max(Const.epsilon, Math.min(1 - Const.epsilon, p));\n        p = 1 / (1 - p);\n        let A = 1 / (1 + Math.exp(((t - 0.5) * p * -2)));\n        let B = 1 / (1 + Math.exp(p));\n        let C = 1 / (1 + Math.exp(-p));\n        return c * (A - B) / (C - B);\n    }\n    static seat(t, c = 1, p = 0.5) {\n        if ((t < 0.5)) {\n            return c * (Math.pow(2 * t, 1 - p)) / 2;\n        }\n        else {\n            return c * (1 - (Math.pow(2 * (1 - t), 1 - p)) / 2);\n        }\n    }\n    static quadraticBezier(t, c = 1, p = [0.05, 0.95]) {\n        let a = (typeof p != \"number\") ? p[0] : p;\n        let b = (typeof p != \"number\") ? p[1] : 0.5;\n        let om2a = 1 - 2 * a;\n        if (om2a === 0) {\n            om2a = Const.epsilon;\n        }\n        let d = (Math.sqrt(a * a + om2a * t) - a) / om2a;\n        return c * ((1 - 2 * b) * (d * d) + (2 * b) * d);\n    }\n    static cubicBezier(t, c = 1, p1 = [0.1, 0.7], p2 = [0.9, 0.2]) {\n        let curve = new Group(new Pt(0, 0), new Pt(p1), new Pt(p2), new Pt(1, 1));\n        return c * Curve.bezierStep(new Pt(t * t * t, t * t, t, 1), Curve.controlPoints(curve)).y;\n    }\n    static quadraticTarget(t, c = 1, p1 = [0.2, 0.35]) {\n        let a = Math.min(1 - Const.epsilon, Math.max(Const.epsilon, p1[0]));\n        let b = Math.min(1, Math.max(0, p1[1]));\n        let A = (1 - b) / (1 - a) - (b / a);\n        let B = (A * (a * a) - b) / a;\n        let y = A * (t * t) - B * t;\n        return c * Math.min(1, Math.max(0, y));\n    }\n    static cliff(t, c = 1, p = 0.5) {\n        return (t > p) ? c : 0;\n    }\n    static step(fn, steps, t, c, ...args) {\n        let s = 1 / steps;\n        let tt = Math.floor(t / s) * s;\n        return fn(tt, c, ...args);\n    }\n}\nexport class Range {\n    constructor(g) {\n        this._dims = 0;\n        this._source = Group.fromPtArray(g);\n        this.calc();\n    }\n    get max() { return this._max.clone(); }\n    get min() { return this._min.clone(); }\n    get magnitude() { return this._mag.clone(); }\n    calc() {\n        if (!this._source)\n            return;\n        let dims = this._source[0].length;\n        this._dims = dims;\n        let max = new Pt(dims);\n        let min = new Pt(dims);\n        let mag = new Pt(dims);\n        for (let i = 0; i < dims; i++) {\n            max[i] = Const.min;\n            min[i] = Const.max;\n            mag[i] = 0;\n            let s = this._source.zipSlice(i);\n            for (let k = 0, len = s.length; k < len; k++) {\n                max[i] = Math.max(max[i], s[k]);\n                min[i] = Math.min(min[i], s[k]);\n                mag[i] = max[i] - min[i];\n            }\n        }\n        this._max = max;\n        this._min = min;\n        this._mag = mag;\n        return this;\n    }\n    mapTo(min, max, exclude) {\n        let target = new Group();\n        for (let i = 0, len = this._source.length; i < len; i++) {\n            let g = this._source[i];\n            let n = new Pt(this._dims);\n            for (let k = 0; k < this._dims; k++) {\n                n[k] = (exclude && exclude[k]) ? g[k] : Num.mapToRange(g[k], this._min[k], this._max[k], min, max);\n            }\n            target.push(n);\n        }\n        return target;\n    }\n    append(g, update = true) {\n        if (g[0].length !== this._dims)\n            throw new Error(`Dimensions don't match. ${this._dims} dimensions in Range and ${g[0].length} provided in parameter. `);\n        this._source = this._source.concat(g);\n        if (update)\n            this.calc();\n        return this;\n    }\n    ticks(count) {\n        let g = new Group();\n        for (let i = 0; i <= count; i++) {\n            let p = new Pt(this._dims);\n            for (let k = 0, len = this._max.length; k < len; k++) {\n                p[k] = Num.lerp(this._min[k], this._max[k], i / count);\n            }\n            g.push(p);\n        }\n        return g;\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Util, Const } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Pt extends Float32Array {\n    constructor(...args) {\n        if (args.length === 1 && typeof args[0] == \"number\") {\n            super(args[0]);\n        }\n        else {\n            super((args.length > 0) ? Util.getArgs(args) : [0, 0]);\n        }\n    }\n    static make(dimensions, defaultValue = 0, randomize = false) {\n        let p = new Float32Array(dimensions);\n        if (defaultValue)\n            p.fill(defaultValue);\n        if (randomize) {\n            for (let i = 0, len = p.length; i < len; i++) {\n                p[i] = p[i] * Math.random();\n            }\n        }\n        return new Pt(p);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get x() { return this[0]; }\n    set x(n) { this[0] = n; }\n    get y() { return this[1]; }\n    set y(n) { this[1] = n; }\n    get z() { return this[2]; }\n    set z(n) { this[2] = n; }\n    get w() { return this[3]; }\n    set w(n) { this[3] = n; }\n    clone() {\n        return new Pt(this);\n    }\n    equals(p, threshold = 0.000001) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            if (Math.abs(this[i] - p[i]) > threshold)\n                return false;\n        }\n        return true;\n    }\n    to(...args) {\n        let p = Util.getArgs(args);\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            this[i] = p[i];\n        }\n        return this;\n    }\n    $to(...args) {\n        return this.clone().to(...args);\n    }\n    toAngle(radian, magnitude, anchorFromPt = false) {\n        let m = (magnitude != undefined) ? magnitude : this.magnitude();\n        let change = [Math.cos(radian) * m, Math.sin(radian) * m];\n        return (anchorFromPt) ? this.add(change) : this.to(change);\n    }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    $take(axis) {\n        let p = [];\n        for (let i = 0, len = axis.length; i < len; i++) {\n            p.push(this[axis[i]] || 0);\n        }\n        return new Pt(p);\n    }\n    $concat(...args) {\n        return new Pt(this.toArray().concat(Util.getArgs(args)));\n    }\n    add(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.add(this, args[0]) : Vec.add(this, Util.getArgs(args));\n        return this;\n    }\n    $add(...args) { return this.clone().add(...args); }\n    subtract(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.subtract(this, args[0]) : Vec.subtract(this, Util.getArgs(args));\n        return this;\n    }\n    $subtract(...args) { return this.clone().subtract(...args); }\n    multiply(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.multiply(this, args[0]) : Vec.multiply(this, Util.getArgs(args));\n        return this;\n    }\n    $multiply(...args) { return this.clone().multiply(...args); }\n    divide(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.divide(this, args[0]) : Vec.divide(this, Util.getArgs(args));\n        return this;\n    }\n    $divide(...args) { return this.clone().divide(...args); }\n    magnitudeSq() { return Vec.dot(this, this); }\n    magnitude() { return Vec.magnitude(this); }\n    unit(magnitude = undefined) {\n        Vec.unit(this, magnitude);\n        return this;\n    }\n    $unit(magnitude = undefined) { return this.clone().unit(magnitude); }\n    dot(...args) { return Vec.dot(this, Util.getArgs(args)); }\n    $cross2D(...args) { return Vec.cross2D(this, Util.getArgs(args)); }\n    $cross(...args) { return Vec.cross(this, Util.getArgs(args)); }\n    $project(...args) {\n        return this.$multiply(this.dot(...args) / this.magnitudeSq());\n    }\n    projectScalar(...args) {\n        return this.dot(...args) / this.magnitude();\n    }\n    abs() {\n        Vec.abs(this);\n        return this;\n    }\n    $abs() {\n        return this.clone().abs();\n    }\n    floor() {\n        Vec.floor(this);\n        return this;\n    }\n    $floor() {\n        return this.clone().floor();\n    }\n    ceil() {\n        Vec.ceil(this);\n        return this;\n    }\n    $ceil() {\n        return this.clone().ceil();\n    }\n    round() {\n        Vec.round(this);\n        return this;\n    }\n    $round() {\n        return this.clone().round();\n    }\n    minValue() {\n        return Vec.min(this);\n    }\n    maxValue() {\n        return Vec.max(this);\n    }\n    $min(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.min(this[i], p[i]);\n        }\n        return m;\n    }\n    $max(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.max(this[i], p[i]);\n        }\n        return m;\n    }\n    angle(axis = Const.xy) {\n        return Math.atan2(this[axis[1]], this[axis[0]]);\n    }\n    angleBetween(p, axis = Const.xy) {\n        return Geom.boundRadian(this.angle(axis)) - Geom.boundRadian(p.angle(axis));\n    }\n    scale(scale, anchor) {\n        Geom.scale(this, scale, anchor || Pt.make(this.length, 0));\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        Geom.rotate2D(this, angle, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        Geom.shear2D(this, scale, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    reflect2D(line, axis) {\n        Geom.reflect2D(this, line, axis);\n        return this;\n    }\n    toString() {\n        return `Pt(${this.join(\", \")})`;\n    }\n    toArray() {\n        return [].slice.call(this);\n    }\n}\nexport class Group extends Array {\n    constructor(...args) {\n        super(...args);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get p1() { return this[0]; }\n    get p2() { return this[1]; }\n    get p3() { return this[2]; }\n    get p4() { return this[3]; }\n    get q1() { return this[this.length - 1]; }\n    get q2() { return this[this.length - 2]; }\n    get q3() { return this[this.length - 3]; }\n    get q4() { return this[this.length - 4]; }\n    clone() {\n        let group = new Group();\n        for (let i = 0, len = this.length; i < len; i++) {\n            group.push(this[i].clone());\n        }\n        return group;\n    }\n    static fromArray(list) {\n        let g = new Group();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = (list[i] instanceof Pt) ? list[i] : new Pt(list[i]);\n            g.push(p);\n        }\n        return g;\n    }\n    static fromPtArray(list) {\n        return Group.from(list);\n    }\n    split(chunkSize, stride, loopBack = false) {\n        let sp = Util.split(this, chunkSize, stride, loopBack);\n        return sp;\n    }\n    insert(pts, index = 0) {\n        Group.prototype.splice.apply(this, [index, 0, ...pts]);\n        return this;\n    }\n    remove(index = 0, count = 1) {\n        let param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        return Group.prototype.splice.apply(this, param);\n    }\n    segments(pts_per_segment = 2, stride = 1, loopBack = false) {\n        return this.split(pts_per_segment, stride, loopBack);\n    }\n    lines() { return this.segments(2, 1); }\n    centroid() {\n        return Geom.centroid(this);\n    }\n    boundingBox() {\n        return Geom.boundingBox(this);\n    }\n    anchorTo(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"to\"); }\n    anchorFrom(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"from\"); }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    interpolate(t) {\n        t = Num.clamp(t, 0, 1);\n        let chunk = this.length - 1;\n        let tc = 1 / (this.length - 1);\n        let idx = Math.floor(t / tc);\n        return Geom.interpolate(this[idx], this[Math.min(this.length - 1, idx + 1)], (t - idx * tc) * chunk);\n    }\n    moveBy(...args) {\n        return this.add(...args);\n    }\n    moveTo(...args) {\n        let d = new Pt(Util.getArgs(args)).subtract(this[0]);\n        this.moveBy(d);\n        return this;\n    }\n    scale(scale, anchor) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.scale(this[i], scale, anchor || this[0]);\n        }\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.rotate2D(this[i], angle, anchor || this[0], axis);\n        }\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.shear2D(this[i], scale, anchor || this[0], axis);\n        }\n        return this;\n    }\n    reflect2D(line, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.reflect2D(this[i], line, axis);\n        }\n        return this;\n    }\n    sortByDimension(dim, desc = false) {\n        return this.sort((a, b) => (desc) ? b[dim] - a[dim] : a[dim] - b[dim]);\n    }\n    forEachPt(ptFn, ...args) {\n        if (!this[0][ptFn]) {\n            Util.warn(`${ptFn} is not a function of Pt`);\n            return this;\n        }\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i] = this[i][ptFn](...args);\n        }\n        return this;\n    }\n    add(...args) {\n        return this.forEachPt(\"add\", ...args);\n    }\n    subtract(...args) {\n        return this.forEachPt(\"subtract\", ...args);\n    }\n    multiply(...args) {\n        return this.forEachPt(\"multiply\", ...args);\n    }\n    divide(...args) {\n        return this.forEachPt(\"divide\", ...args);\n    }\n    $matrixAdd(g) {\n        return Mat.add(this, g);\n    }\n    $matrixMultiply(g, transposed = false, elementwise = false) {\n        return Mat.multiply(this, g, transposed, elementwise);\n    }\n    zipSlice(index, defaultValue = false) {\n        return Mat.zipSlice(this, index, defaultValue);\n    }\n    $zip(defaultValue = undefined, useLongest = false) {\n        return Mat.zip(this, defaultValue, useLongest);\n    }\n    toString() {\n        return \"Group[ \" + this.reduce((p, c) => p + c.toString() + \" \", \"\") + \" ]\";\n    }\n}\nexport class Bound extends Group {\n    constructor(...args) {\n        super(...args);\n        this._center = new Pt();\n        this._size = new Pt();\n        this._topLeft = new Pt();\n        this._bottomRight = new Pt();\n        this._inited = false;\n        this.init();\n    }\n    static fromBoundingRect(rect) {\n        let b = new Bound(new Pt(rect.left || 0, rect.top || 0), new Pt(rect.right || 0, rect.bottom || 0));\n        if (rect.width && rect.height)\n            b.size = new Pt(rect.width, rect.height);\n        return b;\n    }\n    static fromGroup(g) {\n        if (g.length < 2)\n            throw new Error(\"Cannot create a Bound from a group that has less than 2 Pt\");\n        return new Bound(g[0], g[g.length - 1]);\n    }\n    init() {\n        if (this.p1) {\n            this._size = this.p1.clone();\n            this._inited = true;\n        }\n        if (this.p1 && this.p2) {\n            let a = this.p1;\n            let b = this.p2;\n            this.topLeft = a.$min(b);\n            this._bottomRight = a.$max(b);\n            this._updateSize();\n            this._inited = true;\n        }\n    }\n    clone() {\n        return new Bound(this._topLeft.clone(), this._bottomRight.clone());\n    }\n    _updateSize() {\n        this._size = this._bottomRight.$subtract(this._topLeft).abs();\n        this._updateCenter();\n    }\n    _updateCenter() {\n        this._center = this._size.$multiply(0.5).add(this._topLeft);\n    }\n    _updatePosFromTop() {\n        this._bottomRight = this._topLeft.$add(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromBottom() {\n        this._topLeft = this._bottomRight.$subtract(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromCenter() {\n        let half = this._size.$multiply(0.5);\n        this._topLeft = this._center.$subtract(half);\n        this._bottomRight = this._center.$add(half);\n    }\n    get size() { return new Pt(this._size); }\n    set size(p) {\n        this._size = new Pt(p);\n        this._updatePosFromTop();\n    }\n    get center() { return new Pt(this._center); }\n    set center(p) {\n        this._center = new Pt(p);\n        this._updatePosFromCenter();\n    }\n    get topLeft() { return new Pt(this._topLeft); }\n    set topLeft(p) {\n        this._topLeft = new Pt(p);\n        this[0] = this._topLeft;\n        this._updateSize();\n    }\n    get bottomRight() { return new Pt(this._bottomRight); }\n    set bottomRight(p) {\n        this._bottomRight = new Pt(p);\n        this[1] = this._bottomRight;\n        this._updateSize();\n    }\n    get width() { return (this._size.length > 0) ? this._size.x : 0; }\n    set width(w) {\n        this._size.x = w;\n        this._updatePosFromTop();\n    }\n    get height() { return (this._size.length > 1) ? this._size.y : 0; }\n    set height(h) {\n        this._size.y = h;\n        this._updatePosFromTop();\n    }\n    get depth() { return (this._size.length > 2) ? this._size.z : 0; }\n    set depth(d) {\n        this._size.z = d;\n        this._updatePosFromTop();\n    }\n    get x() { return this.topLeft.x; }\n    get y() { return this.topLeft.y; }\n    get z() { return this.topLeft.z; }\n    get inited() { return this._inited; }\n    update() {\n        this._topLeft = this[0];\n        this._bottomRight = this[1];\n        this._updateSize();\n        return this;\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Rectangle, Circle, Polygon } from \"./Op\";\nexport const UIShape = {\n    rectangle: \"rectangle\", circle: \"circle\", polygon: \"polygon\", polyline: \"polyline\", line: \"line\"\n};\nexport const UIPointerActions = {\n    up: \"up\", down: \"down\", move: \"move\", drag: \"drag\", uidrag: \"uidrag\", drop: \"drop\", over: \"over\", out: \"out\", enter: \"enter\", leave: \"leave\", all: \"all\"\n};\nexport class UI {\n    constructor(group, shape, states = {}, id) {\n        this._holds = [];\n        this._group = Group.fromArray(group);\n        this._shape = shape;\n        this._id = id === undefined ? `ui_${(UI._counter++)}` : id;\n        this._states = states;\n        this._actions = {};\n    }\n    static fromRectangle(group, states, id) {\n        return new this(group, UIShape.rectangle, states, id);\n    }\n    static fromCircle(group, states, id) {\n        return new this(group, UIShape.circle, states, id);\n    }\n    static fromPolygon(group, states, id) {\n        return new this(group, UIShape.polygon, states, id);\n    }\n    static fromUI(ui, states, id) {\n        return new this(ui.group, ui.shape, states || ui._states, id);\n    }\n    get id() { return this._id; }\n    set id(d) { this._id = d; }\n    get group() { return this._group; }\n    set group(d) { this._group = d; }\n    get shape() { return this._shape; }\n    set shape(d) { this._shape = d; }\n    state(key, value) {\n        if (!key)\n            return null;\n        if (value !== undefined) {\n            this._states[key] = value;\n            return this;\n        }\n        return this._states[key];\n    }\n    on(key, fn) {\n        if (!this._actions[key])\n            this._actions[key] = [];\n        return UI._addHandler(this._actions[key], fn);\n    }\n    off(key, which) {\n        if (!this._actions[key])\n            return false;\n        if (which === undefined) {\n            delete this._actions[key];\n            return true;\n        }\n        else {\n            return UI._removeHandler(this._actions[key], which);\n        }\n    }\n    listen(key, p) {\n        if (this._actions[key] !== undefined) {\n            if (this._within(p) || this._holds.indexOf(key) >= 0) {\n                UI._trigger(this._actions[key], this, p, key);\n                return true;\n            }\n            else if (this._actions['all']) {\n                UI._trigger(this._actions['all'], this, p, key);\n                return true;\n            }\n        }\n        return false;\n    }\n    hold(key) {\n        this._holds.push(key);\n        return this._holds.length - 1;\n    }\n    unhold(id) {\n        if (id !== undefined) {\n            this._holds = this._holds.splice(id, 1);\n        }\n        else {\n            this._holds = [];\n        }\n    }\n    static track(uis, key, p) {\n        for (let i = 0, len = uis.length; i < len; i++) {\n            uis[i].listen(key, p);\n        }\n    }\n    render(fn) {\n        fn(this._group, this._states);\n    }\n    toString() {\n        return `UI ${this.group.toString}`;\n    }\n    _within(p) {\n        let fn = null;\n        if (this._shape === UIShape.rectangle) {\n            fn = Rectangle.withinBound;\n        }\n        else if (this._shape === UIShape.circle) {\n            fn = Circle.withinBound;\n        }\n        else if (this._shape === UIShape.polygon) {\n            fn = Polygon.hasIntersectPoint;\n        }\n        else {\n            return false;\n        }\n        return fn(this._group, p);\n    }\n    static _trigger(fns, target, pt, type) {\n        if (fns) {\n            for (let i = 0, len = fns.length; i < len; i++) {\n                if (fns[i])\n                    fns[i](target, pt, type);\n            }\n        }\n    }\n    static _addHandler(fns, fn) {\n        if (fn) {\n            fns.push(fn);\n            return fns.length - 1;\n        }\n        else {\n            return -1;\n        }\n    }\n    static _removeHandler(fns, index) {\n        if (index >= 0 && index < fns.length) {\n            let temp = fns.length;\n            fns.splice(index, 1);\n            return (temp > fns.length);\n        }\n        else {\n            return false;\n        }\n    }\n}\nUI._counter = 0;\nexport class UIButton extends UI {\n    constructor(group, shape, states = {}, id) {\n        super(group, shape, states, id);\n        this._hoverID = -1;\n        if (states.hover === undefined)\n            this._states['hover'] = false;\n        if (states.clicks === undefined)\n            this._states['clicks'] = 0;\n        const UA = UIPointerActions;\n        this.on(UA.up, (target, pt, type) => {\n            this.state('clicks', this._states.clicks + 1);\n        });\n        this.on(UA.move, (target, pt, type) => {\n            let hover = this._within(pt);\n            if (hover && !this._states.hover) {\n                this.state('hover', true);\n                UI._trigger(this._actions[UA.enter], this, pt, UA.enter);\n                var _capID = this.hold(UA.move);\n                this._hoverID = this.on(UA.move, (t, p) => {\n                    if (!this._within(p) && !this.state('dragging')) {\n                        this.state('hover', false);\n                        UI._trigger(this._actions[UA.leave], this, pt, UA.leave);\n                        this.off(UA.move, this._hoverID);\n                        this.unhold(_capID);\n                    }\n                });\n            }\n        });\n    }\n    onClick(fn) {\n        return this.on(UIPointerActions.up, fn);\n    }\n    offClick(id) {\n        return this.off(UIPointerActions.up, id);\n    }\n    onHover(enter, leave) {\n        var ids = [undefined, undefined];\n        if (enter)\n            ids[0] = this.on(UIPointerActions.enter, enter);\n        if (leave)\n            ids[1] = this.on(UIPointerActions.leave, leave);\n        return ids;\n    }\n    offHover(enterID, leaveID) {\n        var s = [false, false];\n        if (enterID === undefined || enterID >= 0)\n            s[0] = this.off(UIPointerActions.enter, enterID);\n        if (leaveID === undefined || leaveID >= 0)\n            s[1] = this.off(UIPointerActions.leave, leaveID);\n        return s;\n    }\n}\nexport class UIDragger extends UIButton {\n    constructor(group, shape, states = {}, id) {\n        super(group, shape, states, id);\n        this._draggingID = -1;\n        this._moveHoldID = -1;\n        if (states.dragging === undefined)\n            this._states['dragging'] = false;\n        if (states.offset === undefined)\n            this._states['offset'] = new Pt();\n        const UA = UIPointerActions;\n        this.on(UA.down, (target, pt, type) => {\n            this.state('dragging', true);\n            this.state('offset', new Pt(pt).subtract(target.group[0]));\n            this._moveHoldID = this.hold(UA.move);\n            this._draggingID = this.on(UA.move, (t, p) => {\n                if (this.state('dragging')) {\n                    UI._trigger(this._actions[UA.uidrag], t, p, UA.uidrag);\n                }\n            });\n        });\n        this.on(UA.up, (target, pt, type) => {\n            this.state('dragging', false);\n            this.off(UA.move, this._draggingID);\n            this.unhold(this._moveHoldID);\n            UI._trigger(this._actions[UA.drop], target, pt, type);\n        });\n    }\n    onDrag(fn) {\n        return this.on(UIPointerActions.uidrag, fn);\n    }\n    offDrag(id) {\n        return this.off(UIPointerActions.uidrag, id);\n    }\n    onDrop(fn) {\n        return this.on(UIPointerActions.drop, fn);\n    }\n    offDrop(id) {\n        return this.off(UIPointerActions.drop, id);\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Bound } from \"./Pt\";\nimport { UIPointerActions as UIA } from \"./UI\";\nexport class Space {\n    constructor() {\n        this.id = \"space\";\n        this.bound = new Bound();\n        this._time = { prev: 0, diff: 0, end: -1 };\n        this.players = {};\n        this.playerCount = 0;\n        this._animID = -1;\n        this._pause = false;\n        this._refresh = undefined;\n        this._pointer = new Pt();\n        this._isReady = false;\n        this._playing = false;\n    }\n    refresh(b) {\n        this._refresh = b;\n        return this;\n    }\n    add(p) {\n        let player = (typeof p == \"function\") ? { animate: p } : p;\n        let k = this.playerCount++;\n        let pid = this.id + k;\n        this.players[pid] = player;\n        player.animateID = pid;\n        if (player.resize && this.bound.inited)\n            player.resize(this.bound);\n        if (this._refresh === undefined)\n            this._refresh = true;\n        return this;\n    }\n    remove(player) {\n        delete this.players[player.animateID];\n        return this;\n    }\n    removeAll() {\n        this.players = {};\n        return this;\n    }\n    play(time = 0) {\n        this._animID = requestAnimationFrame(this.play.bind(this));\n        if (this._pause)\n            return this;\n        this._time.diff = time - this._time.prev;\n        this._time.prev = time;\n        try {\n            this.playItems(time);\n        }\n        catch (err) {\n            cancelAnimationFrame(this._animID);\n            this._playing = false;\n            throw err;\n        }\n        return this;\n    }\n    replay() {\n        this._time.end = -1;\n        this.play();\n    }\n    playItems(time) {\n        this._playing = true;\n        if (this._refresh)\n            this.clear();\n        if (this._isReady) {\n            for (let k in this.players) {\n                if (this.players[k].animate)\n                    this.players[k].animate(time, this._time.diff, this);\n            }\n        }\n        if (this._time.end >= 0 && time > this._time.end) {\n            cancelAnimationFrame(this._animID);\n            this._playing = false;\n        }\n    }\n    pause(toggle = false) {\n        this._pause = (toggle) ? !this._pause : true;\n        return this;\n    }\n    resume() {\n        this._pause = false;\n        return this;\n    }\n    stop(t = 0) {\n        this._time.end = t;\n        return this;\n    }\n    playOnce(duration = 5000) {\n        this.play();\n        this.stop(duration);\n        return this;\n    }\n    render(context) {\n        if (this._renderFunc)\n            this._renderFunc(context, this);\n        return this;\n    }\n    set customRendering(f) { this._renderFunc = f; }\n    get customRendering() { return this._renderFunc; }\n    get isPlaying() { return this._playing; }\n    get outerBound() { return this.bound.clone(); }\n    get innerBound() { return new Bound(Pt.make(this.size.length, 0), this.size.clone()); }\n    get size() { return this.bound.size.clone(); }\n    get center() { return this.size.divide(2); }\n    get width() { return this.bound.width; }\n    get height() { return this.bound.height; }\n}\nexport class MultiTouchSpace extends Space {\n    constructor() {\n        super(...arguments);\n        this._pressed = false;\n        this._dragged = false;\n        this._hasMouse = false;\n        this._hasTouch = false;\n    }\n    get pointer() {\n        let p = this._pointer.clone();\n        p.id = this._pointer.id;\n        return p;\n    }\n    bindCanvas(evt, callback) {\n        this._canvas.addEventListener(evt, callback);\n    }\n    unbindCanvas(evt, callback) {\n        this._canvas.removeEventListener(evt, callback);\n    }\n    bindMouse(_bind = true) {\n        if (_bind) {\n            this.bindCanvas(\"mousedown\", this._mouseDown.bind(this));\n            this.bindCanvas(\"mouseup\", this._mouseUp.bind(this));\n            this.bindCanvas(\"mouseover\", this._mouseOver.bind(this));\n            this.bindCanvas(\"mouseout\", this._mouseOut.bind(this));\n            this.bindCanvas(\"mousemove\", this._mouseMove.bind(this));\n            this._hasMouse = true;\n        }\n        else {\n            this.unbindCanvas(\"mousedown\", this._mouseDown.bind(this));\n            this.unbindCanvas(\"mouseup\", this._mouseUp.bind(this));\n            this.unbindCanvas(\"mouseover\", this._mouseOver.bind(this));\n            this.unbindCanvas(\"mouseout\", this._mouseOut.bind(this));\n            this.unbindCanvas(\"mousemove\", this._mouseMove.bind(this));\n            this._hasMouse = false;\n        }\n        return this;\n    }\n    bindTouch(_bind = true) {\n        if (_bind) {\n            this.bindCanvas(\"touchstart\", this._mouseDown.bind(this));\n            this.bindCanvas(\"touchend\", this._mouseUp.bind(this));\n            this.bindCanvas(\"touchmove\", this._touchMove.bind(this));\n            this.bindCanvas(\"touchcancel\", this._mouseOut.bind(this));\n            this._hasTouch = true;\n        }\n        else {\n            this.unbindCanvas(\"touchstart\", this._mouseDown.bind(this));\n            this.unbindCanvas(\"touchend\", this._mouseUp.bind(this));\n            this.unbindCanvas(\"touchmove\", this._touchMove.bind(this));\n            this.unbindCanvas(\"touchcancel\", this._mouseOut.bind(this));\n            this._hasTouch = false;\n        }\n        return this;\n    }\n    touchesToPoints(evt, which = \"touches\") {\n        if (!evt || !evt[which])\n            return [];\n        let ts = [];\n        for (var i = 0; i < evt[which].length; i++) {\n            let t = evt[which].item(i);\n            ts.push(new Pt(t.pageX - this.bound.topLeft.x, t.pageY - this.bound.topLeft.y));\n        }\n        return ts;\n    }\n    _mouseAction(type, evt) {\n        let px = 0, py = 0;\n        if (evt instanceof MouseEvent) {\n            for (let k in this.players) {\n                if (this.players.hasOwnProperty(k)) {\n                    let v = this.players[k];\n                    px = evt.pageX - this.outerBound.x;\n                    py = evt.pageY - this.outerBound.y;\n                    if (v.action)\n                        v.action(type, px, py, evt);\n                }\n            }\n        }\n        else {\n            for (let k in this.players) {\n                if (this.players.hasOwnProperty(k)) {\n                    let v = this.players[k];\n                    let c = evt.changedTouches && evt.changedTouches.length > 0;\n                    let touch = evt.changedTouches.item(0);\n                    px = (c) ? touch.pageX - this.outerBound.x : 0;\n                    py = (c) ? touch.pageY - this.outerBound.y : 0;\n                    if (v.action)\n                        v.action(type, px, py, evt);\n                }\n            }\n        }\n        if (type) {\n            this._pointer.to(px, py);\n            this._pointer.id = type;\n        }\n    }\n    _mouseDown(evt) {\n        this._mouseAction(UIA.down, evt);\n        this._pressed = true;\n        return false;\n    }\n    _mouseUp(evt) {\n        this._mouseAction(UIA.up, evt);\n        if (this._dragged)\n            this._mouseAction(UIA.drop, evt);\n        this._pressed = false;\n        this._dragged = false;\n        return false;\n    }\n    _mouseMove(evt) {\n        this._mouseAction(UIA.move, evt);\n        if (this._pressed) {\n            this._dragged = true;\n            this._mouseAction(UIA.drag, evt);\n        }\n        return false;\n    }\n    _mouseOver(evt) {\n        this._mouseAction(UIA.over, evt);\n        return false;\n    }\n    _mouseOut(evt) {\n        this._mouseAction(UIA.out, evt);\n        if (this._dragged)\n            this._mouseAction(UIA.drop, evt);\n        this._dragged = false;\n        return false;\n    }\n    _touchMove(evt) {\n        this._mouseMove(evt);\n        evt.preventDefault();\n        return false;\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Util } from \"./Util\";\nexport class Form {\n    constructor() {\n        this._ready = false;\n    }\n    get ready() { return this._ready; }\n    static _checkSize(pts, required = 2) {\n        if (pts.length < required) {\n            Util.warn(\"Requires 2 or more Pts in this Group.\");\n            return false;\n        }\n        return true;\n    }\n}\nexport class VisualForm extends Form {\n    constructor() {\n        super(...arguments);\n        this._filled = true;\n        this._stroked = true;\n        this._font = new Font(14, \"sans-serif\");\n    }\n    get filled() { return this._filled; }\n    set filled(b) { this._filled = b; }\n    get stroked() { return this._stroked; }\n    set stroked(b) { this._stroked = b; }\n    get currentFont() { return this._font; }\n    _multiple(groups, shape, ...rest) {\n        if (!groups)\n            return this;\n        for (let i = 0, len = groups.length; i < len; i++) {\n            this[shape](groups[i], ...rest);\n        }\n        return this;\n    }\n    fill(c) {\n        return this;\n    }\n    fillOnly(c) {\n        this.stroke(false);\n        return this.fill(c);\n    }\n    stroke(c, width, linejoin, linecap) {\n        return this;\n    }\n    strokeOnly(c, width, linejoin, linecap) {\n        this.fill(false);\n        return this.stroke(c, width, linejoin, linecap);\n    }\n    points(pts, radius, shape) {\n        if (!pts)\n            return;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            this.point(pts[i], radius, shape);\n        }\n        return this;\n    }\n    circles(groups) {\n        return this._multiple(groups, \"circle\");\n    }\n    squares(groups) {\n        return this._multiple(groups, \"square\");\n    }\n    lines(groups) {\n        return this._multiple(groups, \"line\");\n    }\n    polygons(groups) {\n        return this._multiple(groups, \"polygon\");\n    }\n    rects(groups) {\n        return this._multiple(groups, \"rect\");\n    }\n}\nexport class Font {\n    constructor(size = 12, face = \"sans-serif\", weight = \"\", style = \"\", lineHeight = 1.5) {\n        this.size = size;\n        this.face = face;\n        this.style = style;\n        this.weight = weight;\n        this.lineHeight = lineHeight;\n    }\n    get value() { return `${this.style} ${this.weight} ${this.size}px/${this.lineHeight} ${this.face}`; }\n    toString() { return this.value; }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt } from \"./Pt\";\nexport class Typography {\n    static textWidthEstimator(fn, samples = [\"M\", \"n\", \".\"], distribution = [0.06, 0.8, 0.14]) {\n        let m = samples.map(fn);\n        let avg = new Pt(distribution).dot(m);\n        return (str) => str.length * avg;\n    }\n    static truncate(fn, str, width, tail = \"\") {\n        let trim = Math.floor(str.length * Math.min(1, width / fn(str)));\n        if (trim < str.length) {\n            trim = Math.max(0, trim - tail.length);\n            return [str.substr(0, trim) + tail, trim];\n        }\n        else {\n            return [str, str.length];\n        }\n    }\n    static fontSizeToBox(box, ratio = 1, byHeight = true) {\n        let i = byHeight ? 1 : 0;\n        let h = (box[1][i] - box[0][i]);\n        let f = ratio * h;\n        return function (b) {\n            let nh = (b[1][i] - b[0][i]) / h;\n            return f * nh;\n        };\n    }\n    static fontSizeToThreshold(threshold, direction = 0) {\n        return function (defaultSize, val) {\n            let d = defaultSize * val / threshold;\n            if (direction < 0)\n                return Math.min(d, defaultSize);\n            if (direction > 0)\n                return Math.max(d, defaultSize);\n            return d;\n        };\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Pt, Group, Bound } from \"./Pt\";\nimport { Const } from \"./Util\";\nimport { Typography as Typo } from \"./Typography\";\nimport { Rectangle } from './Op';\nexport class CanvasSpace extends MultiTouchSpace {\n    constructor(elem, callback) {\n        super();\n        this._pixelScale = 1;\n        this._autoResize = true;\n        this._bgcolor = \"#e1e9f0\";\n        this._offscreen = false;\n        this._initialResize = false;\n        var _selector = null;\n        var _existed = false;\n        this.id = \"pt\";\n        if (elem instanceof Element) {\n            _selector = elem;\n            this.id = \"pts_existing_space\";\n        }\n        else {\n            let id = elem;\n            id = (elem[0] === \"#\" || elem[0] === \".\") ? elem : \"#\" + elem;\n            _selector = document.querySelector(id);\n            _existed = true;\n            this.id = id.substr(1);\n        }\n        if (!_selector) {\n            this._container = this._createElement(\"div\", this.id + \"_container\");\n            this._canvas = this._createElement(\"canvas\", this.id);\n            this._container.appendChild(this._canvas);\n            document.body.appendChild(this._container);\n            _existed = false;\n        }\n        else if (_selector.nodeName.toLowerCase() != \"canvas\") {\n            this._container = _selector;\n            this._canvas = this._createElement(\"canvas\", this.id + \"_canvas\");\n            this._container.appendChild(this._canvas);\n            this._initialResize = true;\n        }\n        else {\n            this._canvas = _selector;\n            this._container = _selector.parentElement;\n            this._autoResize = false;\n        }\n        setTimeout(this._ready.bind(this, callback), 100);\n        this._ctx = this._canvas.getContext('2d');\n    }\n    _createElement(elem = \"div\", id) {\n        let d = document.createElement(elem);\n        d.setAttribute(\"id\", id);\n        return d;\n    }\n    _ready(callback) {\n        if (!this._container)\n            throw new Error(`Cannot initiate #${this.id} element`);\n        this._isReady = true;\n        this._resizeHandler(null);\n        this.clear(this._bgcolor);\n        this._canvas.dispatchEvent(new Event(\"ready\"));\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                if (this.players[k].start)\n                    this.players[k].start(this.bound.clone(), this);\n            }\n        }\n        this._pointer = this.center;\n        this._initialResize = false;\n        if (callback)\n            callback(this.bound, this._canvas);\n    }\n    setup(opt) {\n        if (opt.bgcolor)\n            this._bgcolor = opt.bgcolor;\n        this.autoResize = (opt.resize != undefined) ? opt.resize : false;\n        if (opt.retina !== false) {\n            let r1 = window.devicePixelRatio || 1;\n            let r2 = this._ctx.webkitBackingStorePixelRatio || this._ctx.mozBackingStorePixelRatio || this._ctx.msBackingStorePixelRatio || this._ctx.oBackingStorePixelRatio || this._ctx.backingStorePixelRatio || 1;\n            this._pixelScale = Math.max(1, r1 / r2);\n        }\n        if (opt.offscreen) {\n            this._offscreen = true;\n            this._offCanvas = this._createElement(\"canvas\", this.id + \"_offscreen\");\n            this._offCtx = this._offCanvas.getContext('2d');\n        }\n        else {\n            this._offscreen = false;\n        }\n        return this;\n    }\n    set autoResize(auto) {\n        this._autoResize = auto;\n        if (auto) {\n            window.addEventListener('resize', this._resizeHandler.bind(this));\n        }\n        else {\n            window.removeEventListener('resize', this._resizeHandler.bind(this));\n        }\n    }\n    get autoResize() { return this._autoResize; }\n    resize(b, evt) {\n        this.bound = b;\n        this._canvas.width = this.bound.size.x * this._pixelScale;\n        this._canvas.height = this.bound.size.y * this._pixelScale;\n        this._canvas.style.width = Math.floor(this.bound.size.x) + \"px\";\n        this._canvas.style.height = Math.floor(this.bound.size.y) + \"px\";\n        if (this._offscreen) {\n            this._offCanvas.width = this.bound.size.x * this._pixelScale;\n            this._offCanvas.height = this.bound.size.y * this._pixelScale;\n        }\n        if (this._pixelScale != 1) {\n            this._ctx.scale(this._pixelScale, this._pixelScale);\n            this._ctx.translate(0.5, 0.5);\n            if (this._offscreen) {\n                this._offCtx.scale(this._pixelScale, this._pixelScale);\n                this._offCtx.translate(0.5, 0.5);\n            }\n        }\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                let p = this.players[k];\n                if (p.resize)\n                    p.resize(this.bound, evt);\n            }\n        }\n        this.render(this._ctx);\n        if (evt && !this.isPlaying)\n            this.playOnce(0);\n        return this;\n    }\n    _resizeHandler(evt) {\n        let b = (this._autoResize || this._initialResize) ? this._container.getBoundingClientRect() : this._canvas.getBoundingClientRect();\n        if (b) {\n            let box = Bound.fromBoundingRect(b);\n            box.center = box.center.add(window.pageXOffset, window.pageYOffset);\n            this.resize(box, evt);\n        }\n    }\n    set background(bg) { this._bgcolor = bg; }\n    get background() { return this._bgcolor; }\n    get pixelScale() {\n        return this._pixelScale;\n    }\n    get hasOffscreen() {\n        return this._offscreen;\n    }\n    get offscreenCtx() { return this._offCtx; }\n    get offscreenCanvas() { return this._offCanvas; }\n    getForm() { return new CanvasForm(this); }\n    get element() {\n        return this._canvas;\n    }\n    get parent() {\n        return this._container;\n    }\n    get ready() {\n        return this._isReady;\n    }\n    get ctx() { return this._ctx; }\n    clear(bg) {\n        if (bg)\n            this._bgcolor = bg;\n        let lastColor = this._ctx.fillStyle;\n        if (this._bgcolor && this._bgcolor != \"transparent\") {\n            this._ctx.fillStyle = this._bgcolor;\n            this._ctx.fillRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n        }\n        else {\n            this._ctx.clearRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n        }\n        this._ctx.fillStyle = lastColor;\n        return this;\n    }\n    clearOffscreen(bg) {\n        if (this._offscreen) {\n            if (bg) {\n                this._offCtx.fillStyle = bg;\n                this._offCtx.fillRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n            }\n            else {\n                this._offCtx.clearRect(-1, -1, this._offCanvas.width + 1, this._offCanvas.height + 1);\n            }\n        }\n        return this;\n    }\n    playItems(time) {\n        if (this._isReady) {\n            this._ctx.save();\n            if (this._offscreen)\n                this._offCtx.save();\n            super.playItems(time);\n            this._ctx.restore();\n            if (this._offscreen)\n                this._offCtx.restore();\n            this.render(this._ctx);\n        }\n    }\n}\nexport class CanvasForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._style = {\n            fillStyle: \"#f03\", strokeStyle: \"#fff\",\n            lineWidth: 1, lineJoin: \"bevel\", lineCap: \"butt\",\n        };\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx = this._space.ctx;\n                this._ctx.fillStyle = this._style.fillStyle;\n                this._ctx.strokeStyle = this._style.strokeStyle;\n                this._ctx.lineJoin = \"bevel\";\n                this._ctx.font = this._font.value;\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    useOffscreen(off = true, clear = false) {\n        if (clear)\n            this._space.clearOffscreen((typeof clear == \"string\") ? clear : null);\n        this._ctx = (this._space.hasOffscreen && off) ? this._space.offscreenCtx : this._space.ctx;\n        return this;\n    }\n    renderOffscreen(offset = [0, 0]) {\n        if (this._space.hasOffscreen) {\n            this._space.ctx.drawImage(this._space.offscreenCanvas, offset[0], offset[1], this._space.width, this._space.height);\n        }\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.filled = c;\n        }\n        else {\n            this.filled = true;\n            this._style.fillStyle = c;\n            this._ctx.fillStyle = c;\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.stroked = c;\n        }\n        else {\n            this.stroked = true;\n            this._style.strokeStyle = c;\n            this._ctx.strokeStyle = c;\n            if (width) {\n                this._ctx.lineWidth = width;\n                this._style.lineWidth = width;\n            }\n            if (linejoin) {\n                this._ctx.lineJoin = linejoin;\n                this._style.lineJoin = linejoin;\n            }\n            if (linecap) {\n                this._ctx.lineCap = linecap;\n                this._style.lineCap = linecap;\n            }\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        if (this._estimateTextWidth)\n            this.fontWidthEstimate(true);\n        return this;\n    }\n    fontWidthEstimate(estimate = true) {\n        this._estimateTextWidth = (estimate) ? Typo.textWidthEstimator(((c) => this._ctx.measureText(c).width)) : undefined;\n        return this;\n    }\n    getTextWidth(c) {\n        return (!this._estimateTextWidth) ? this._ctx.measureText(c + \" .\").width : this._estimateTextWidth(c);\n    }\n    _textTruncate(str, width, tail = \"\") {\n        return Typo.truncate(this.getTextWidth.bind(this), str, width, tail);\n    }\n    _textAlign(box, vertical, offset, center) {\n        if (!center)\n            center = Rectangle.center(box);\n        var px = box[0][0];\n        if (this._ctx.textAlign == \"end\" || this._ctx.textAlign == \"right\") {\n            px = box[1][0];\n        }\n        else if (this._ctx.textAlign == \"center\" || this._ctx.textAlign == \"middle\") {\n            px = center[0];\n        }\n        var py = center[1];\n        if (vertical == \"top\" || vertical == \"start\") {\n            py = box[0][1];\n        }\n        else if (vertical == \"end\" || vertical == \"bottom\") {\n            py = box[1][1];\n        }\n        return (offset) ? new Pt(px + offset[0], py + offset[1]) : new Pt(px, py);\n    }\n    reset() {\n        for (let k in this._style) {\n            if (this._style.hasOwnProperty(k)) {\n                this._ctx[k] = this._style[k];\n            }\n        }\n        this._font = new Font();\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    _paint() {\n        if (this._filled)\n            this._ctx.fill();\n        if (this._stroked)\n            this._ctx.stroke();\n    }\n    point(p, radius = 5, shape = \"square\") {\n        if (!p)\n            return;\n        if (!CanvasForm[shape])\n            throw new Error(`${shape} is not a static function of CanvasForm`);\n        CanvasForm[shape](this._ctx, p, radius);\n        this._paint();\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        if (!pt)\n            return;\n        ctx.beginPath();\n        ctx.arc(pt[0], pt[1], radius, 0, Const.two_pi, false);\n        ctx.closePath();\n    }\n    circle(pts) {\n        CanvasForm.circle(this._ctx, pts[0], pts[1][0]);\n        this._paint();\n        return this;\n    }\n    static arc(ctx, pt, radius, startAngle, endAngle, cc) {\n        if (!pt)\n            return;\n        ctx.beginPath();\n        ctx.arc(pt[0], pt[1], radius, startAngle, endAngle, cc);\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        CanvasForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n        this._paint();\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        if (!pt)\n            return;\n        let x1 = pt[0] - halfsize;\n        let y1 = pt[1] - halfsize;\n        let x2 = pt[0] + halfsize;\n        let y2 = pt[1] + halfsize;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x1, y2);\n        ctx.lineTo(x2, y2);\n        ctx.lineTo(x2, y1);\n        ctx.closePath();\n    }\n    square(pt, halfsize) {\n        CanvasForm.square(this._ctx, pt, halfsize);\n        this._paint();\n        return this;\n    }\n    static line(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            if (pts[i])\n                ctx.lineTo(pts[i][0], pts[i][1]);\n        }\n    }\n    line(pts) {\n        CanvasForm.line(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static polygon(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            if (pts[i])\n                ctx.lineTo(pts[i][0], pts[i][1]);\n        }\n        ctx.closePath();\n    }\n    polygon(pts) {\n        CanvasForm.polygon(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        ctx.lineTo(pts[0][0], pts[1][1]);\n        ctx.lineTo(pts[1][0], pts[1][1]);\n        ctx.lineTo(pts[1][0], pts[0][1]);\n        ctx.closePath();\n    }\n    rect(pts) {\n        CanvasForm.rect(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static image(ctx, img, target = new Pt(), orig) {\n        if (typeof target[0] === \"number\") {\n            ctx.drawImage(img, target[0], target[1]);\n        }\n        else {\n            let t = target;\n            if (orig) {\n                ctx.drawImage(img, orig[0][0], orig[0][1], orig[1][0] - orig[0][0], orig[1][1] - orig[0][1], t[0][0], t[0][1], t[1][0] - t[0][0], t[1][1] - t[0][1]);\n            }\n            else {\n                ctx.drawImage(img, t[0][0], t[0][1], t[1][0] - t[0][0], t[1][1] - t[0][1]);\n            }\n        }\n    }\n    image(img, target, original) {\n        CanvasForm.image(this._ctx, img, target, original);\n        return this;\n    }\n    static text(ctx, pt, txt, maxWidth) {\n        if (!pt)\n            return;\n        ctx.fillText(txt, pt[0], pt[1], maxWidth);\n    }\n    text(pt, txt, maxWidth) {\n        CanvasForm.text(this._ctx, pt, txt, maxWidth);\n        return this;\n    }\n    textBox(box, txt, verticalAlign = \"middle\", tail = \"\", overrideBaseline = true) {\n        if (overrideBaseline)\n            this._ctx.textBaseline = verticalAlign;\n        let size = Rectangle.size(box);\n        let t = this._textTruncate(txt, size[0], tail);\n        this.text(this._textAlign(box, verticalAlign), t[0]);\n        return this;\n    }\n    paragraphBox(box, txt, lineHeight = 1.2, verticalAlign = \"top\", crop = true) {\n        let size = Rectangle.size(box);\n        this._ctx.textBaseline = \"top\";\n        let lstep = this._font.size * lineHeight;\n        let nextLine = (sub, buffer = [], cc = 0) => {\n            if (!sub)\n                return buffer;\n            if (crop && cc * lstep > size[1] - lstep * 2)\n                return buffer;\n            if (cc > 10000)\n                throw new Error(\"max recursion reached (10000)\");\n            let t = this._textTruncate(sub, size[0], \"\");\n            let newln = t[0].indexOf(\"\\n\");\n            if (newln >= 0) {\n                buffer.push(t[0].substr(0, newln));\n                return nextLine(sub.substr(newln + 1), buffer, cc + 1);\n            }\n            let dt = t[0].lastIndexOf(\" \") + 1;\n            if (dt <= 0 || t[1] === sub.length)\n                dt = undefined;\n            let line = t[0].substr(0, dt);\n            buffer.push(line);\n            return (t[1] <= 0 || t[1] === sub.length) ? buffer : nextLine(sub.substr((dt || t[1])), buffer, cc + 1);\n        };\n        let lines = nextLine(txt);\n        let lsize = lines.length * lstep;\n        let lbox = box;\n        if (verticalAlign == \"middle\" || verticalAlign == \"center\") {\n            let lpad = (size[1] - lsize) / 2;\n            if (crop)\n                lpad = Math.max(0, lpad);\n            lbox = new Group(box[0].$add(0, lpad), box[1].$subtract(0, lpad));\n        }\n        else if (verticalAlign == \"bottom\") {\n            lbox = new Group(box[0].$add(0, size[1] - lsize), box[1]);\n        }\n        else {\n            lbox = new Group(box[0], box[0].$add(size[0], lsize));\n        }\n        let center = Rectangle.center(lbox);\n        for (let i = 0, len = lines.length; i < len; i++) {\n            this.text(this._textAlign(lbox, \"top\", [0, i * lstep], center), lines[i]);\n        }\n        return this;\n    }\n    alignText(alignment = \"left\", baseline = \"alphabetic\") {\n        if (baseline == \"center\")\n            baseline = \"middle\";\n        if (baseline == \"baseline\")\n            baseline = \"alphabetic\";\n        this._ctx.textAlign = alignment;\n        this._ctx.textBaseline = baseline;\n        return this;\n    }\n    log(txt) {\n        let w = this._ctx.measureText(txt).width + 20;\n        this.stroke(false).fill(\"rgba(0,0,0,.4)\").rect([[0, 0], [w, 20]]);\n        this.fill(\"#fff\").text([10, 14], txt);\n        return this;\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Line, Triangle } from \"./Op\";\nimport { Const } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nimport { Vec } from \"./LinearAlgebra\";\nexport class Create {\n    static distributeRandom(bound, count, dimensions = 2) {\n        let pts = new Group();\n        for (let i = 0; i < count; i++) {\n            let p = [bound.x + Math.random() * bound.width];\n            if (dimensions > 1)\n                p.push(bound.y + Math.random() * bound.height);\n            if (dimensions > 2)\n                p.push(bound.z + Math.random() * bound.depth);\n            pts.push(new Pt(p));\n        }\n        return pts;\n    }\n    static distributeLinear(line, count) {\n        let ln = Line.subpoints(line, count - 2);\n        ln.unshift(line[0]);\n        ln.push(line[line.length - 1]);\n        return ln;\n    }\n    static gridPts(bound, columns, rows, orientation = [0.5, 0.5]) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).$divide(columns, rows);\n        let offset = unit.$multiply(orientation);\n        let g = new Group();\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(bound.topLeft.$add(unit.$multiply(c, r)).add(offset));\n            }\n        }\n        return g;\n    }\n    static gridCells(bound, columns, rows) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).divide(columns, rows);\n        let g = [];\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(new Group(bound.topLeft.$add(unit.$multiply(c, r)), bound.topLeft.$add(unit.$multiply(c, r).add(unit))));\n            }\n        }\n        return g;\n    }\n    static radialPts(center, radius, count) {\n        let g = new Group();\n        let a = Const.two_pi / count;\n        for (let i = 0; i < count; i++) {\n            g.push(new Pt(center).toAngle(a * i - Const.half_pi, radius, true));\n        }\n        return g;\n    }\n    static noisePts(pts, dx = 0.01, dy = 0.01, rows = 0, columns = 0) {\n        let seed = Math.random();\n        let g = new Group();\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let np = new Noise(pts[i]);\n            let r = (rows && rows > 0) ? Math.floor(i / rows) : i;\n            let c = (columns && columns > 0) ? i % columns : i;\n            np.initNoise(dx * c, dy * r);\n            np.seed(seed);\n            g.push(np);\n        }\n        return g;\n    }\n    static delaunay(pts) {\n        return Delaunay.from(pts);\n    }\n}\nconst grad3 = [\n    [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\n    [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\n    [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]\n];\nconst permTable = [151, 160, 137, 91, 90, 15,\n    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n    129, 22, 39, 253, 9, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n];\nexport class Noise extends Pt {\n    constructor(...args) {\n        super(...args);\n        this.perm = [];\n        this._n = new Pt(0.01, 0.01);\n        this.perm = permTable.concat(permTable);\n    }\n    initNoise(...args) {\n        this._n = new Pt(...args);\n    }\n    step(x = 0, y = 0) {\n        this._n.add(x, y);\n    }\n    seed(s) {\n        if (s > 0 && s < 1)\n            s *= 65536;\n        s = Math.floor(s);\n        if (s < 256)\n            s |= s << 8;\n        for (let i = 0; i < 255; i++) {\n            let v = (i & 1) ? permTable[i] ^ (s & 255) : permTable[i] ^ ((s >> 8) & 255);\n            this.perm[i] = this.perm[i + 256] = v;\n        }\n    }\n    noise2D() {\n        let i = Math.max(0, Math.floor(this._n[0])) % 255;\n        let j = Math.max(0, Math.floor(this._n[1])) % 255;\n        let x = (this._n[0] % 255) - i;\n        let y = (this._n[1] % 255) - j;\n        let n00 = Vec.dot(grad3[(i + this.perm[j]) % 12], [x, y, 0]);\n        let n01 = Vec.dot(grad3[(i + this.perm[j + 1]) % 12], [x, y - 1, 0]);\n        let n10 = Vec.dot(grad3[(i + 1 + this.perm[j]) % 12], [x - 1, y, 0]);\n        let n11 = Vec.dot(grad3[(i + 1 + this.perm[j + 1]) % 12], [x - 1, y - 1, 0]);\n        let _fade = (f) => f * f * f * (f * (f * 6 - 15) + 10);\n        let tx = _fade(x);\n        return Num.lerp(Num.lerp(n00, n10, tx), Num.lerp(n01, n11, tx), _fade(y));\n    }\n}\nexport class Delaunay extends Group {\n    constructor() {\n        super(...arguments);\n        this._mesh = [];\n    }\n    delaunay(triangleOnly = true) {\n        if (this.length < 3)\n            return [];\n        this._mesh = [];\n        let n = this.length;\n        let indices = [];\n        for (let i = 0; i < n; i++)\n            indices[i] = i;\n        indices.sort((i, j) => this[j][0] - this[i][0]);\n        let pts = this.slice();\n        let st = this._superTriangle();\n        pts = pts.concat(st);\n        let opened = [this._circum(n, n + 1, n + 2, st)];\n        let closed = [];\n        let tris = [];\n        for (let i = 0, len = indices.length; i < len; i++) {\n            let c = indices[i];\n            let edges = [];\n            let j = opened.length;\n            if (!this._mesh[c])\n                this._mesh[c] = {};\n            while (j--) {\n                let circum = opened[j];\n                let radius = circum.circle[1][0];\n                let d = pts[c].$subtract(circum.circle[0]);\n                if (d[0] > 0 && d[0] * d[0] > radius * radius) {\n                    closed.push(circum);\n                    tris.push(circum.triangle);\n                    opened.splice(j, 1);\n                    continue;\n                }\n                if (d[0] * d[0] + d[1] * d[1] - radius * radius > Const.epsilon) {\n                    continue;\n                }\n                edges.push(circum.i, circum.j, circum.j, circum.k, circum.k, circum.i);\n                opened.splice(j, 1);\n            }\n            Delaunay._dedupe(edges);\n            j = edges.length;\n            while (j > 1) {\n                opened.push(this._circum(edges[--j], edges[--j], c, false, pts));\n            }\n        }\n        for (let i = 0, len = opened.length; i < len; i++) {\n            let o = opened[i];\n            if (o.i < n && o.j < n && o.k < n) {\n                closed.push(o);\n                tris.push(o.triangle);\n                this._cache(o);\n            }\n        }\n        return (triangleOnly) ? tris : closed;\n    }\n    voronoi() {\n        let vs = [];\n        let n = this._mesh;\n        for (let i = 0, len = n.length; i < len; i++) {\n            vs.push(this.neighborPts(i, true));\n        }\n        return vs;\n    }\n    mesh() {\n        return this._mesh;\n    }\n    neighborPts(i, sort = false) {\n        let cs = new Group();\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k].circle[0]);\n        }\n        return (sort) ? Geom.sortEdges(cs) : cs;\n    }\n    neighbors(i) {\n        let cs = [];\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k]);\n        }\n        return cs;\n    }\n    _cache(o) {\n        this._mesh[o.i][`${Math.min(o.j, o.k)}-${Math.max(o.j, o.k)}`] = o;\n        this._mesh[o.j][`${Math.min(o.i, o.k)}-${Math.max(o.i, o.k)}`] = o;\n        this._mesh[o.k][`${Math.min(o.i, o.j)}-${Math.max(o.i, o.j)}`] = o;\n    }\n    _superTriangle() {\n        let minPt = this[0];\n        let maxPt = this[0];\n        for (let i = 1, len = this.length; i < len; i++) {\n            minPt = minPt.$min(this[i]);\n            maxPt = maxPt.$max(this[i]);\n        }\n        let d = maxPt.$subtract(minPt);\n        let mid = minPt.$add(maxPt).divide(2);\n        let dmax = Math.max(d[0], d[1]);\n        return new Group(mid.$subtract(20 * dmax, dmax), mid.$add(0, 20 * dmax), mid.$add(20 * dmax, -dmax));\n    }\n    _triangle(i, j, k, pts = this) {\n        return new Group(pts[i], pts[j], pts[k]);\n    }\n    _circum(i, j, k, tri, pts = this) {\n        let t = tri || this._triangle(i, j, k, pts);\n        return {\n            i: i,\n            j: j,\n            k: k,\n            triangle: t,\n            circle: Triangle.circumcircle(t)\n        };\n    }\n    static _dedupe(edges) {\n        let j = edges.length;\n        while (j > 1) {\n            let b = edges[--j];\n            let a = edges[--j];\n            let i = j;\n            while (i > 1) {\n                let n = edges[--i];\n                let m = edges[--i];\n                if ((a == m && b == n) || (a == n && b == m)) {\n                    edges.splice(j, 2);\n                    edges.splice(i, 2);\n                    break;\n                }\n            }\n        }\n        return edges;\n    }\n}\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Util } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nexport class Color extends Pt {\n    constructor(...args) {\n        super(...args);\n        this._mode = \"rgb\";\n        this._isNorm = false;\n    }\n    static from(...args) {\n        let p = [1, 1, 1, 1];\n        let c = Util.getArgs(args);\n        for (let i = 0, len = p.length; i < len; i++) {\n            if (i < c.length)\n                p[i] = c[i];\n        }\n        return new Color(p);\n    }\n    static fromHex(hex) {\n        if (hex[0] == \"#\")\n            hex = hex.substr(1);\n        if (hex.length <= 3) {\n            let fn = (i) => hex[i] || \"F\";\n            hex = `${fn(0)}${fn(0)}${fn(1)}${fn(1)}${fn(2)}${fn(2)}`;\n        }\n        let alpha = 1;\n        if (hex.length === 8) {\n            alpha = hex.substr(6) && 0xFF / 255;\n            hex = hex.substring(0, 6);\n        }\n        let hexVal = parseInt(hex, 16);\n        return new Color(hexVal >> 16, hexVal >> 8 & 0xFF, hexVal & 0xFF, alpha);\n    }\n    static rgb(...args) { return Color.from(...args).toMode(\"rgb\"); }\n    static hsl(...args) { return Color.from(...args).toMode(\"hsl\"); }\n    static hsb(...args) { return Color.from(...args).toMode(\"hsb\"); }\n    static lab(...args) { return Color.from(...args).toMode(\"lab\"); }\n    static lch(...args) { return Color.from(...args).toMode(\"lch\"); }\n    static luv(...args) { return Color.from(...args).toMode(\"luv\"); }\n    static xyz(...args) { return Color.from(...args).toMode(\"xyz\"); }\n    static maxValues(mode) { return Color.ranges[mode].zipSlice(1).$take([0, 1, 2]); }\n    get hex() { return this.toString(\"hex\"); }\n    get rgb() { return this.toString(\"rgb\"); }\n    get rgba() { return this.toString(\"rgba\"); }\n    clone() {\n        let c = new Color(this);\n        c.toMode(this._mode);\n        return c;\n    }\n    toMode(mode, convert = false) {\n        if (convert) {\n            let fname = this._mode.toUpperCase() + \"to\" + mode.toUpperCase();\n            if (Color[fname]) {\n                this.to(Color[fname](this, this._isNorm, this._isNorm));\n            }\n            else {\n                throw new Error(\"Cannot convert color with \" + fname);\n            }\n        }\n        this._mode = mode;\n        return this;\n    }\n    get mode() { return this._mode; }\n    get r() { return this[0]; }\n    set r(n) { this[0] = n; }\n    get g() { return this[1]; }\n    set g(n) { this[1] = n; }\n    get b() { return this[2]; }\n    set b(n) { this[2] = n; }\n    get h() { return (this._mode == \"lch\") ? this[2] : this[0]; }\n    set h(n) {\n        let i = (this._mode == \"lch\") ? 2 : 0;\n        this[i] = n;\n    }\n    get s() { return this[1]; }\n    set s(n) { this[1] = n; }\n    get l() { return (this._mode == \"hsl\") ? this[2] : this[0]; }\n    set l(n) {\n        let i = (this._mode == \"hsl\") ? 2 : 0;\n        this[i] = n;\n    }\n    get a() { return this[1]; }\n    set a(n) { this[1] = n; }\n    get c() { return this[1]; }\n    set c(n) { this[1] = n; }\n    get u() { return this[1]; }\n    set u(n) { this[1] = n; }\n    get v() { return this[2]; }\n    set v(n) { this[2] = n; }\n    get alpha() { return (this.length > 3) ? this[3] : 1; }\n    get normalized() { return this._isNorm; }\n    set normalized(b) { this._isNorm = b; }\n    normalize(toNorm = true) {\n        if (this._isNorm == toNorm)\n            return this;\n        let ranges = Color.ranges[this._mode];\n        for (let i = 0; i < 3; i++) {\n            this[i] = (!toNorm)\n                ? Num.mapToRange(this[i], 0, 1, ranges[i][0], ranges[i][1])\n                : Num.mapToRange(this[i], ranges[i][0], ranges[i][1], 0, 1);\n        }\n        this._isNorm = toNorm;\n        return this;\n    }\n    $normalize(toNorm = true) { return this.clone().normalize(toNorm); }\n    toString(format = \"mode\") {\n        if (format == \"hex\") {\n            let _hex = (n) => {\n                let s = Math.floor(n).toString(16);\n                return (s.length < 2) ? '0' + s : s;\n            };\n            return `#${_hex(this[0])}${_hex(this[1])}${_hex(this[2])}`;\n        }\n        else if (format == \"rgba\") {\n            return `rgba(${Math.floor(this[0])},${Math.floor(this[1])},${Math.floor(this[2])},${this.alpha}`;\n        }\n        else if (format == \"rgb\") {\n            return `rgb(${Math.floor(this[0])},${Math.floor(this[1])},${Math.floor(this[2])}`;\n        }\n        else {\n            return `${this._mode}(${this[0]},${this[1]},${this[2]},${this.alpha})`;\n        }\n    }\n    static RGBtoHSL(rgb, normalizedInput = false, normalizedOutput = false) {\n        let [r, g, b] = (!normalizedInput) ? rgb.$normalize() : rgb;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h = (max + min) / 2;\n        let s = h;\n        let l = h;\n        if (max == min) {\n            h = 0;\n            s = 0;\n        }\n        else {\n            let d = max - min;\n            s = (l > 0.5) ? d / (2 - max - min) : d / (max + min);\n            h = 0;\n            if (max === r) {\n                h = (g - b) / d + ((g < b) ? 6 : 0);\n            }\n            else if (max === g) {\n                h = (b - r) / d + 2;\n            }\n            else if (max === b) {\n                h = (r - g) / d + 4;\n            }\n        }\n        return Color.hsl(((normalizedOutput) ? h / 60 : h * 60), s, l, rgb.alpha);\n    }\n    static HSLtoRGB(hsl, normalizedInput = false, normalizedOutput = false) {\n        let [h, s, l] = hsl;\n        if (!normalizedInput)\n            h = h / 360;\n        if (s == 0)\n            return Color.rgb(l * 255, l * 255, l * 255, hsl.alpha);\n        let q = (l <= 0.5) ? l * (1 + s) : l + s - (l * s);\n        let p = 2 * l - q;\n        let convert = (t) => {\n            t = (t < 0) ? t + 1 : (t > 1) ? t - 1 : t;\n            if (t * 6 < 1) {\n                return p + (q - p) * t * 6;\n            }\n            else if (t * 2 < 1) {\n                return q;\n            }\n            else if (t * 3 < 2) {\n                return p + (q - p) * ((2 / 3) - t) * 6;\n            }\n            else {\n                return p;\n            }\n        };\n        let sc = (normalizedOutput) ? 1 : 255;\n        return Color.rgb(sc * convert((h + 1 / 3)), sc * convert(h), sc * convert((h - 1 / 3)), hsl.alpha);\n    }\n    static RGBtoHSB(rgb, normalizedInput = false, normalizedOutput = false) {\n        let [r, g, b] = (!normalizedInput) ? rgb.$normalize() : rgb;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let d = max - min;\n        let h = 0;\n        let s = (max === 0) ? 0 : d / max;\n        let v = max;\n        if (max != min) {\n            if (max === r) {\n                h = (g - b) / d + ((g < b) ? 6 : 0);\n            }\n            else if (max === g) {\n                h = (b - r) / d + 2;\n            }\n            else if (max === b) {\n                h = (r - g) / d + 4;\n            }\n        }\n        return Color.hsb(((normalizedOutput) ? h / 60 : h * 60), s, v, rgb.alpha);\n    }\n    static HSBtoRGB(hsb, normalizedInput = false, normalizedOutput = false) {\n        let [h, s, v] = hsb;\n        if (!normalizedInput)\n            h = h / 360;\n        let i = Math.floor(h * 6);\n        let f = h * 6 - i;\n        let p = v * (1 - s);\n        let q = v * (1 - f * s);\n        let t = v * (1 - (1 - f) * s);\n        let pick = [\n            [v, t, p], [q, v, p], [p, v, t],\n            [p, q, v], [t, p, v], [v, p, q]\n        ];\n        let c = pick[i % 6];\n        let sc = (normalizedOutput) ? 1 : 255;\n        return Color.rgb(sc * c[0], sc * c[1], sc * c[2], hsb.alpha);\n    }\n    static RGBtoLAB(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.XYZtoLAB(Color.RGBtoXYZ(c), false, normalizedOutput);\n    }\n    static LABtoRGB(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        return Color.XYZtoRGB(Color.LABtoXYZ(c), false, normalizedOutput);\n    }\n    static RGBtoLCH(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.LABtoLCH(Color.RGBtoLAB(c), false, normalizedOutput);\n    }\n    static LCHtoRGB(lch, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lch.$normalize(false) : lch;\n        return Color.LABtoRGB(Color.LCHtoLAB(c), false, normalizedOutput);\n    }\n    static RGBtoLUV(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.XYZtoLUV(Color.RGBtoXYZ(c), false, normalizedOutput);\n    }\n    static LUVtoRGB(luv, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? luv.$normalize(false) : luv;\n        return Color.XYZtoRGB(Color.LUVtoXYZ(c), false, normalizedOutput);\n    }\n    static RGBtoXYZ(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (!normalizedInput) ? rgb.$normalize() : rgb.clone();\n        for (let i = 0; i < 3; i++) {\n            c[i] = (c[i] > 0.04045) ? Math.pow((c[i] + 0.055) / 1.055, 2.4) : c[i] / 12.92;\n            if (!normalizedOutput)\n                c[i] = c[i] * 100;\n        }\n        let cc = Color.xyz(c[0] * 0.4124564 + c[1] * 0.3575761 + c[2] * 0.1804375, c[0] * 0.2126729 + c[1] * 0.7151522 + c[2] * 0.0721750, c[0] * 0.0193339 + c[1] * 0.1191920 + c[2] * 0.9503041, rgb.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoRGB(xyz, normalizedInput = false, normalizedOutput = false) {\n        let [x, y, z] = (!normalizedInput) ? xyz.$normalize() : xyz;\n        let rgb = [\n            x * 3.2404542 + y * -1.5371385 + z * -0.4985314,\n            x * -0.9692660 + y * 1.8760108 + z * 0.0415560,\n            x * 0.0556434 + y * -0.2040259 + z * 1.0572252\n        ];\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = (rgb[i] < 0) ? 0 : (rgb[i] > 0.0031308) ? (1.055 * Math.pow(rgb[i], 1 / 2.4) - 0.055) : (12.92 * rgb[i]);\n            rgb[i] = Math.max(0, Math.min(1, rgb[i]));\n            if (!normalizedOutput)\n                rgb[i] = Math.round(rgb[i] * 255);\n        }\n        let cc = Color.rgb(rgb[0], rgb[1], rgb[2], xyz.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoLAB(xyz, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? xyz.$normalize(false) : xyz.clone();\n        c.divide(Color.D65);\n        let fn = (n) => (n > 0.008856) ? Math.pow(n, 1 / 3) : (7.787 * n) + 16 / 116;\n        let cy = fn(c[1]);\n        let cc = Color.lab((116 * cy) - 16, 500 * (fn(c[0]) - cy), 200 * (cy - fn(c[2])), xyz.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static LABtoXYZ(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        let y = (c[0] + 16) / 116;\n        let x = (c[1] / 500) + y;\n        let z = y - c[2] / 200;\n        let fn = (n) => {\n            let nnn = n * n * n;\n            return (nnn > 0.008856) ? nnn : (n - 16 / 116) / 7.787;\n        };\n        let d = Color.D65;\n        let cc = Color.xyz(Math.max(0, d[0] * fn(x)), Math.max(0, d[1] * fn(y)), Math.max(0, d[2] * fn(z)), lab.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoLUV(xyz, normalizedInput = false, normalizedOutput = false) {\n        let [x, y, z] = (normalizedInput) ? xyz.$normalize(false) : xyz;\n        let u = (4 * x) / (x + (15 * y) + (3 * z));\n        let v = (9 * y) / (x + (15 * y) + (3 * z));\n        y = y / 100;\n        y = (y > 0.008856) ? Math.pow(y, 1 / 3) : (7.787 * y + 16 / 116);\n        let refU = (4 * Color.D65[0]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let refV = (9 * Color.D65[1]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let L = (116 * y) - 16;\n        return Color.luv(L, 13 * L * (u - refU), 13 * L * (v - refV), xyz.alpha);\n    }\n    static LUVtoXYZ(luv, normalizedInput = false, normalizedOutput = false) {\n        let [l, u, v] = (normalizedInput) ? luv.$normalize(false) : luv;\n        let y = (l + 16) / 116;\n        let cubeY = y * y * y;\n        y = (cubeY > 0.008856) ? cubeY : (y - 16 / 116) / 7.787;\n        let refU = (4 * Color.D65[0]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let refV = (9 * Color.D65[1]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        u = u / (13 * l) + refU;\n        v = v / (13 * l) + refV;\n        y = y * 100;\n        let x = -1 * (9 * y * u) / ((u - 4) * v - u * v);\n        let z = (9 * y - (15 * v * y) - (v * x)) / (3 * v);\n        return Color.xyz(x, y, z, luv.alpha);\n    }\n    static LABtoLCH(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        let h = Geom.toDegree(Geom.boundRadian(Math.atan2(c[2], c[1])));\n        return Color.lch(c[0], Math.sqrt(c[1] * c[1] + c[2] * c[2]), h, lab.alpha);\n    }\n    static LCHtoLAB(lch, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lch.$normalize(false) : lch;\n        let rad = Geom.toRadian(c[2]);\n        return Color.lab(c[0], Math.cos(rad) * c[1], Math.sin(rad) * c[1], lch.alpha);\n    }\n}\nColor.D65 = new Pt(95.047, 100, 108.883, 1);\nColor.ranges = {\n    rgb: new Group(new Pt(0, 255), new Pt(0, 255), new Pt(0, 255)),\n    hsl: new Group(new Pt(0, 360), new Pt(0, 1), new Pt(0, 1)),\n    hsb: new Group(new Pt(0, 360), new Pt(0, 1), new Pt(0, 1)),\n    lab: new Group(new Pt(0, 100), new Pt(-128, 127), new Pt(-128, 127)),\n    lch: new Group(new Pt(0, 100), new Pt(0, 100), new Pt(0, 360)),\n    luv: new Group(new Pt(0, 100), new Pt(-134, 220), new Pt(-140, 122)),\n    xyz: new Group(new Pt(0, 100), new Pt(0, 100), new Pt(0, 100))\n};\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Util } from './Util';\nimport { Pt, Bound } from './Pt';\nexport class DOMSpace extends MultiTouchSpace {\n    constructor(elem, callback) {\n        super();\n        this.id = \"domspace\";\n        this._autoResize = true;\n        this._bgcolor = \"#e1e9f0\";\n        this._css = {};\n        var _selector = null;\n        var _existed = false;\n        this.id = \"pts\";\n        if (elem instanceof Element) {\n            _selector = elem;\n            this.id = \"pts_existing_space\";\n        }\n        else {\n            _selector = document.querySelector(elem);\n            _existed = true;\n            this.id = elem.substr(1);\n        }\n        if (!_selector) {\n            this._container = DOMSpace.createElement(\"div\", \"pts_container\");\n            this._canvas = DOMSpace.createElement(\"div\", \"pts_element\");\n            this._container.appendChild(this._canvas);\n            document.body.appendChild(this._container);\n            _existed = false;\n        }\n        else {\n            this._canvas = _selector;\n            this._container = _selector.parentElement;\n        }\n        setTimeout(this._ready.bind(this, callback), 50);\n    }\n    static createElement(elem = \"div\", id, appendTo) {\n        let d = document.createElement(elem);\n        if (id)\n            d.setAttribute(\"id\", id);\n        if (appendTo && appendTo.appendChild)\n            appendTo.appendChild(d);\n        return d;\n    }\n    _ready(callback) {\n        if (!this._container)\n            throw new Error(`Cannot initiate #${this.id} element`);\n        this._isReady = true;\n        this._resizeHandler(null);\n        this.clear(this._bgcolor);\n        this._canvas.dispatchEvent(new Event(\"ready\"));\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                if (this.players[k].start)\n                    this.players[k].start(this.bound.clone(), this);\n            }\n        }\n        this._pointer = this.center;\n        this.refresh(false);\n        if (callback)\n            callback(this.bound, this._canvas);\n    }\n    setup(opt) {\n        if (opt.bgcolor) {\n            this._bgcolor = opt.bgcolor;\n        }\n        this.autoResize = (opt.resize != undefined) ? opt.resize : false;\n        return this;\n    }\n    getForm() {\n        return null;\n    }\n    set autoResize(auto) {\n        this._autoResize = auto;\n        if (auto) {\n            window.addEventListener('resize', this._resizeHandler.bind(this));\n        }\n        else {\n            delete this._css['width'];\n            delete this._css['height'];\n            window.removeEventListener('resize', this._resizeHandler.bind(this));\n        }\n    }\n    get autoResize() { return this._autoResize; }\n    resize(b, evt) {\n        this.bound = b;\n        this.styles({ width: `${b.width}px`, height: `${b.height}px` }, true);\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                let p = this.players[k];\n                if (p.resize)\n                    p.resize(this.bound, evt);\n            }\n        }\n        return this;\n    }\n    _resizeHandler(evt) {\n        let b = Bound.fromBoundingRect(this._container.getBoundingClientRect());\n        if (this._autoResize) {\n            this.styles({ width: \"100%\", height: \"100%\" }, true);\n        }\n        else {\n            this.styles({ width: `${b.width}px`, height: `${b.height}px` }, true);\n        }\n        this.resize(b, evt);\n    }\n    get element() {\n        return this._canvas;\n    }\n    get parent() {\n        return this._container;\n    }\n    get ready() { return this._isReady; }\n    clear(bg) {\n        if (bg)\n            this.background = bg;\n        this._canvas.innerHTML = \"\";\n        return this;\n    }\n    set background(bg) {\n        this._bgcolor = bg;\n        this._container.style.backgroundColor = this._bgcolor;\n    }\n    get background() { return this._bgcolor; }\n    style(key, val, update = false) {\n        this._css[key] = val;\n        if (update)\n            this._canvas.style[key] = val;\n        return this;\n    }\n    styles(styles, update = false) {\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k))\n                this.style(k, styles[k], update);\n        }\n        return this;\n    }\n    static setAttr(elem, data) {\n        for (let k in data) {\n            if (data.hasOwnProperty(k)) {\n                elem.setAttribute(k, data[k]);\n            }\n        }\n        return elem;\n    }\n    static getInlineStyles(data) {\n        let str = \"\";\n        for (let k in data) {\n            if (data.hasOwnProperty(k)) {\n                if (data[k])\n                    str += `${k}: ${data[k]}; `;\n            }\n        }\n        return str;\n    }\n}\nexport class HTMLSpace extends DOMSpace {\n    getForm() {\n        return new HTMLForm(this);\n    }\n    static htmlElement(parent, name, id, autoClass = true) {\n        if (!parent || !parent.appendChild)\n            throw new Error(\"parent is not a valid DOM element\");\n        let elem = document.querySelector(`#${id}`);\n        if (!elem) {\n            elem = document.createElement(name);\n            elem.setAttribute(\"id\", id);\n            if (autoClass)\n                elem.setAttribute(\"class\", id.substring(0, id.indexOf(\"-\")));\n            parent.appendChild(elem);\n        }\n        return elem;\n    }\n    remove(player) {\n        let temp = this._container.querySelectorAll(\".\" + HTMLForm.scopeID(player));\n        temp.forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n        return super.remove(player);\n    }\n    removeAll() {\n        this._container.innerHTML = \"\";\n        return super.removeAll();\n    }\n}\nexport class HTMLForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._ctx = {\n            group: null,\n            groupID: \"pts\",\n            groupCount: 0,\n            currentID: \"pts0\",\n            currentClass: \"\",\n            style: {\n                \"filled\": true,\n                \"stroked\": true,\n                \"background\": \"#f03\",\n                \"border-color\": \"#fff\",\n                \"color\": \"#000\",\n                \"border-width\": \"1px\",\n                \"border-radius\": \"0\",\n                \"border-style\": \"solid\",\n                \"position\": \"absolute\",\n                \"top\": 0,\n                \"left\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            font: \"11px sans-serif\",\n            fontSize: 11,\n            fontFamily: \"sans-serif\"\n        };\n        this._ready = false;\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx.group = this._space.element;\n                this._ctx.groupID = \"pts_dom_\" + (HTMLForm.groupID++);\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    styleTo(k, v, unit = '') {\n        if (this._ctx.style[k] === undefined)\n            throw new Error(`${k} style property doesn't exist`);\n        this._ctx.style[k] = `${v}${unit}`;\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"filled\", c);\n            if (!c)\n                this.styleTo(\"background\", \"transparent\");\n        }\n        else {\n            this.styleTo(\"filled\", true);\n            this.styleTo(\"background\", c);\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"stroked\", c);\n            if (!c)\n                this.styleTo(\"border-width\", 0);\n        }\n        else {\n            this.styleTo(\"stroked\", true);\n            this.styleTo(\"border-color\", c);\n            this.styleTo(\"border-width\", (width || 1) + \"px\");\n        }\n        return this;\n    }\n    fillText(c) {\n        this.styleTo(\"color\", c);\n        return this;\n    }\n    cls(c) {\n        if (typeof c == \"boolean\") {\n            this._ctx.currentClass = \"\";\n        }\n        else {\n            this._ctx.currentClass = c;\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        return this;\n    }\n    reset() {\n        this._ctx.style = {\n            \"filled\": true, \"stroked\": true,\n            \"background\": \"#f03\", \"border-color\": \"#fff\",\n            \"border-width\": \"1px\"\n        };\n        this._font = new Font(14, \"sans-serif\");\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    updateScope(group_id, group) {\n        this._ctx.group = group;\n        this._ctx.groupID = group_id;\n        this._ctx.groupCount = 0;\n        this.nextID();\n        return this._ctx;\n    }\n    scope(item) {\n        if (!item || item.animateID == null)\n            throw new Error(\"item not defined or not yet added to Space\");\n        return this.updateScope(HTMLForm.scopeID(item), this.space.element);\n    }\n    nextID() {\n        this._ctx.groupCount++;\n        this._ctx.currentID = `${this._ctx.groupID}-${this._ctx.groupCount}`;\n        return this._ctx.currentID;\n    }\n    static getID(ctx) {\n        return ctx.currentID || `p-${HTMLForm.domID++}`;\n    }\n    static scopeID(item) {\n        return `item-${item.animateID}`;\n    }\n    static style(elem, styles) {\n        let st = [];\n        if (!styles[\"filled\"])\n            st.push(\"background: none\");\n        if (!styles[\"stroked\"])\n            st.push(\"border: none\");\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n                let v = styles[k];\n                if (v) {\n                    if (!styles[\"filled\"] && k.indexOf('background') === 0) {\n                        continue;\n                    }\n                    else if (!styles[\"stroked\"] && k.indexOf('border-width') === 0) {\n                        continue;\n                    }\n                    else {\n                        st.push(`${k}: ${v}`);\n                    }\n                }\n            }\n        }\n        return HTMLSpace.setAttr(elem, { style: st.join(\";\") });\n    }\n    static rectStyle(ctx, pt, size) {\n        ctx.style[\"left\"] = pt[0] + \"px\";\n        ctx.style[\"top\"] = pt[1] + \"px\";\n        ctx.style[\"width\"] = size[0] + \"px\";\n        ctx.style[\"height\"] = size[1] + \"px\";\n        return ctx;\n    }\n    static point(ctx, pt, radius = 5, shape = \"square\") {\n        if (shape === \"circle\") {\n            return HTMLForm.circle(ctx, pt, radius);\n        }\n        else {\n            return HTMLForm.square(ctx, pt, radius);\n        }\n    }\n    point(pt, radius = 5, shape = \"square\") {\n        this.nextID();\n        if (shape == \"circle\")\n            this.styleTo(\"border-radius\", \"100%\");\n        HTMLForm.point(this._ctx, pt, radius, shape);\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-circle ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(radius), new Pt(radius * 2, radius * 2));\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    circle(pts) {\n        this.nextID();\n        this.styleTo(\"border-radius\", \"100%\");\n        HTMLForm.circle(this._ctx, pts[0], pts[1][0]);\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-square ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(halfsize), new Pt(halfsize * 2, halfsize * 2));\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    square(pt, halfsize) {\n        this.nextID();\n        HTMLForm.square(this._ctx, pt, halfsize);\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-rect ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, pts[0], pts[1]);\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    rect(pts) {\n        this.nextID();\n        this.styleTo(\"border-radius\", \"0\");\n        HTMLForm.rect(this._ctx, pts);\n        return this;\n    }\n    static text(ctx, pt, txt) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, {\n            position: 'absolute',\n            class: `pts-form pts-text ${ctx.currentClass}`,\n            left: pt[0],\n            top: pt[1],\n        });\n        elem.textContent = txt;\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    text(pt, txt) {\n        this.nextID();\n        HTMLForm.text(this._ctx, pt, txt);\n        return this;\n    }\n    log(txt) {\n        this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n        return this;\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        Util.warn(\"arc is not implemented in HTMLForm\");\n        return this;\n    }\n    line(pts) {\n        Util.warn(\"line is not implemented in HTMLForm\");\n        return this;\n    }\n    polygon(pts) {\n        Util.warn(\"polygon is not implemented in HTMLForm\");\n        return this;\n    }\n}\nHTMLForm.groupID = 0;\nHTMLForm.domID = 0;\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { VisualForm, Font } from \"./Form\";\nimport { Geom } from './Num';\nimport { Const } from './Util';\nimport { Pt, Group } from './Pt';\nimport { Rectangle } from \"./Op\";\nimport { DOMSpace } from \"./Dom\";\nexport class SVGSpace extends DOMSpace {\n    constructor(elem, callback) {\n        super(elem, callback);\n        this.id = \"svgspace\";\n        this._bgcolor = \"#999\";\n        if (this._canvas.nodeName.toLowerCase() != \"svg\") {\n            let s = SVGSpace.svgElement(this._canvas, \"svg\", `${this.id}_svg`);\n            this._container = this._canvas;\n            this._canvas = s;\n        }\n    }\n    getForm() { return new SVGForm(this); }\n    get element() {\n        return this._canvas;\n    }\n    resize(b, evt) {\n        super.resize(b, evt);\n        SVGSpace.setAttr(this.element, {\n            \"viewBox\": `0 0 ${this.bound.width} ${this.bound.height}`,\n            \"width\": `${this.bound.width}`,\n            \"height\": `${this.bound.height}`,\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"version\": \"1.1\"\n        });\n        return this;\n    }\n    static svgElement(parent, name, id) {\n        if (!parent || !parent.appendChild)\n            throw new Error(\"parent is not a valid DOM element\");\n        let elem = document.querySelector(`#${id}`);\n        if (!elem) {\n            elem = document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n            elem.setAttribute(\"id\", id);\n            parent.appendChild(elem);\n        }\n        return elem;\n    }\n    remove(player) {\n        let temp = this._container.querySelectorAll(\".\" + SVGForm.scopeID(player));\n        temp.forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n        return super.remove(player);\n    }\n    removeAll() {\n        this._container.innerHTML = \"\";\n        return super.removeAll();\n    }\n}\nexport class SVGForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._ctx = {\n            group: null,\n            groupID: \"pts\",\n            groupCount: 0,\n            currentID: \"pts0\",\n            currentClass: \"\",\n            style: {\n                \"filled\": true,\n                \"stroked\": true,\n                \"fill\": \"#f03\",\n                \"stroke\": \"#fff\",\n                \"stroke-width\": 1,\n                \"stroke-linejoin\": \"bevel\",\n                \"stroke-linecap\": \"sqaure\"\n            },\n            font: \"11px sans-serif\",\n            fontSize: 11,\n            fontFamily: \"sans-serif\"\n        };\n        this._ready = false;\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx.group = this._space.element;\n                this._ctx.groupID = \"pts_svg_\" + (SVGForm.groupID++);\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    styleTo(k, v) {\n        if (this._ctx.style[k] === undefined)\n            throw new Error(`${k} style property doesn't exist`);\n        this._ctx.style[k] = v;\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"filled\", c);\n        }\n        else {\n            this.styleTo(\"filled\", true);\n            this.styleTo(\"fill\", c);\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"stroked\", c);\n        }\n        else {\n            this.styleTo(\"stroked\", true);\n            this.styleTo(\"stroke\", c);\n            if (width)\n                this.styleTo(\"stroke-width\", width);\n            if (linejoin)\n                this.styleTo(\"stroke-linejoin\", linejoin);\n            if (linecap)\n                this.styleTo(\"stroke-linecap\", linecap);\n        }\n        return this;\n    }\n    cls(c) {\n        if (typeof c == \"boolean\") {\n            this._ctx.currentClass = \"\";\n        }\n        else {\n            this._ctx.currentClass = c;\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        return this;\n    }\n    reset() {\n        this._ctx.style = {\n            \"filled\": true, \"stroked\": true,\n            \"fill\": \"#f03\", \"stroke\": \"#fff\",\n            \"stroke-width\": 1,\n            \"stroke-linejoin\": \"bevel\",\n            \"stroke-linecap\": \"sqaure\"\n        };\n        this._font = new Font(14, \"sans-serif\");\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    updateScope(group_id, group) {\n        this._ctx.group = group;\n        this._ctx.groupID = group_id;\n        this._ctx.groupCount = 0;\n        this.nextID();\n        return this._ctx;\n    }\n    scope(item) {\n        if (!item || item.animateID == null)\n            throw new Error(\"item not defined or not yet added to Space\");\n        return this.updateScope(SVGForm.scopeID(item), this.space.element);\n    }\n    nextID() {\n        this._ctx.groupCount++;\n        this._ctx.currentID = `${this._ctx.groupID}-${this._ctx.groupCount}`;\n        return this._ctx.currentID;\n    }\n    static getID(ctx) {\n        return ctx.currentID || `p-${SVGForm.domID++}`;\n    }\n    static scopeID(item) {\n        return `item-${item.animateID}`;\n    }\n    static style(elem, styles) {\n        let st = [];\n        if (!styles[\"filled\"])\n            st.push(\"fill: none\");\n        if (!styles[\"stroked\"])\n            st.push(\"stroke: none\");\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n                let v = styles[k];\n                if (v) {\n                    if (!styles[\"filled\"] && k.indexOf('fill') === 0) {\n                        continue;\n                    }\n                    else if (!styles[\"stroked\"] && k.indexOf('stroke') === 0) {\n                        continue;\n                    }\n                    else {\n                        st.push(`${k}: ${v}`);\n                    }\n                }\n            }\n        }\n        return DOMSpace.setAttr(elem, { style: st.join(\";\") });\n    }\n    static point(ctx, pt, radius = 5, shape = \"square\") {\n        if (shape === \"circle\") {\n            return SVGForm.circle(ctx, pt, radius);\n        }\n        else {\n            return SVGForm.square(ctx, pt, radius);\n        }\n    }\n    point(pt, radius = 5, shape = \"square\") {\n        this.nextID();\n        SVGForm.point(this._ctx, pt, radius, shape);\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        let elem = SVGSpace.svgElement(ctx.group, \"circle\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            cx: pt[0],\n            cy: pt[1],\n            r: radius,\n            'class': `pts-svgform pts-circle ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    circle(pts) {\n        this.nextID();\n        SVGForm.circle(this._ctx, pts[0], pts[1][0]);\n        return this;\n    }\n    static arc(ctx, pt, radius, startAngle, endAngle, cc) {\n        let elem = SVGSpace.svgElement(ctx.group, \"path\", SVGForm.getID(ctx));\n        const start = new Pt(pt).toAngle(startAngle, radius, true);\n        const end = new Pt(pt).toAngle(endAngle, radius, true);\n        const diff = Geom.boundAngle(endAngle) - Geom.boundAngle(startAngle);\n        let largeArc = (diff > Const.pi) ? true : false;\n        if (cc)\n            largeArc = !largeArc;\n        const sweep = (cc) ? \"0\" : \"1\";\n        const d = `M ${start[0]} ${start[1]} A ${radius} ${radius} 0 ${largeArc ? \"1\" : \"0\"} ${sweep} ${end[0]} ${end[1]}`;\n        DOMSpace.setAttr(elem, {\n            d: d,\n            'class': `pts-svgform pts-arc ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        this.nextID();\n        SVGForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        let elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            x: pt[0] - halfsize,\n            y: pt[1] - halfsize,\n            width: halfsize * 2,\n            height: halfsize * 2,\n            'class': `pts-svgform pts-square ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    square(pt, halfsize) {\n        this.nextID();\n        SVGForm.square(this._ctx, pt, halfsize);\n        return this;\n    }\n    static line(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        if (pts.length > 2)\n            return SVGForm._poly(ctx, pts, false);\n        let elem = SVGSpace.svgElement(ctx.group, \"line\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            x1: pts[0][0],\n            y1: pts[0][1],\n            x2: pts[1][0],\n            y2: pts[1][1],\n            'class': `pts-svgform pts-line ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    line(pts) {\n        this.nextID();\n        SVGForm.line(this._ctx, pts);\n        return this;\n    }\n    static _poly(ctx, pts, closePath = true) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = SVGSpace.svgElement(ctx.group, ((closePath) ? \"polygon\" : \"polyline\"), SVGForm.getID(ctx));\n        let points = pts.reduce((a, p) => a + `${p[0]},${p[1]} `, \"\");\n        DOMSpace.setAttr(elem, {\n            points: points,\n            'class': `pts-svgform pts-polygon ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    static polygon(ctx, pts) {\n        return SVGForm._poly(ctx, pts, true);\n    }\n    polygon(pts) {\n        this.nextID();\n        SVGForm.polygon(this._ctx, pts);\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n        let bound = Group.fromArray(pts).boundingBox();\n        let size = Rectangle.size(bound);\n        DOMSpace.setAttr(elem, {\n            x: bound[0][0],\n            y: bound[0][1],\n            width: size[0],\n            height: size[1],\n            'class': `pts-svgform pts-rect ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    rect(pts) {\n        this.nextID();\n        SVGForm.rect(this._ctx, pts);\n        return this;\n    }\n    static text(ctx, pt, txt) {\n        let elem = SVGSpace.svgElement(ctx.group, \"text\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            \"pointer-events\": \"none\",\n            x: pt[0],\n            y: pt[1],\n            dx: 0, dy: 0,\n            'class': `pts-svgform pts-text ${ctx.currentClass}`,\n        });\n        elem.textContent = txt;\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    text(pt, txt) {\n        this.nextID();\n        SVGForm.text(this._ctx, pt, txt);\n        return this;\n    }\n    log(txt) {\n        this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n        return this;\n    }\n}\nSVGForm.groupID = 0;\nSVGForm.domID = 0;\n","/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group, Bound } from \"./Pt\";\nimport { Polygon, Circle } from \"./Op\";\nexport class World {\n    constructor(bound, friction = 1, gravity = 0) {\n        this._lastTime = null;\n        this._gravity = new Pt();\n        this._friction = 1;\n        this._damping = 0.75;\n        this._particles = [];\n        this._bodies = [];\n        this._pnames = [];\n        this._bnames = [];\n        this._bound = Bound.fromGroup(bound);\n        this._friction = friction;\n        this._gravity = (typeof gravity === \"number\") ? new Pt(0, gravity) : new Pt(gravity);\n        return this;\n    }\n    get gravity() { return this._gravity; }\n    set gravity(g) { this._gravity = g; }\n    get friction() { return this._friction; }\n    set friction(f) { this._friction = f; }\n    get damping() { return this._damping; }\n    set damping(f) { this._damping = f; }\n    get bodyCount() { return this._bodies.length; }\n    get particleCount() { return this._particles.length; }\n    body(id) {\n        let idx = id;\n        if (typeof id === \"string\" && id.length > 0) {\n            idx = this._bnames.indexOf(id);\n        }\n        if (!(idx >= 0))\n            throw new Error(\"Cannot find body id: \" + id);\n        return this._bodies[idx];\n    }\n    particle(id) {\n        let idx = id;\n        if (typeof id === \"string\" && id.length > 0) {\n            idx = this._pnames.indexOf(id);\n        }\n        if (!(idx >= 0))\n            throw new Error(\"Cannot find particle id: \" + id);\n        return this._particles[idx];\n    }\n    bodyIndex(name) {\n        return this._bnames.indexOf(name);\n    }\n    particleIndex(name) {\n        return this._pnames.indexOf(name);\n    }\n    update(ms) {\n        let dt = ms / 1000;\n        this._updateParticles(dt);\n        this._updateBodies(dt);\n    }\n    drawParticles(fn) {\n        this._drawParticles = fn;\n    }\n    drawBodies(fn) {\n        this._drawBodies = fn;\n    }\n    add(p, name = '') {\n        if (p instanceof Body) {\n            this._bodies.push(p);\n            this._bnames.push(name);\n        }\n        else {\n            this._particles.push(p);\n            this._pnames.push(name);\n        }\n        return this;\n    }\n    _index(fn, id) {\n        let index = 0;\n        if (typeof id === \"string\") {\n            index = fn(id);\n            if (index < 0)\n                throw new Error(\"Cannot find index of \" + id);\n        }\n        else {\n            index = id;\n        }\n        return index;\n    }\n    removeBody(from, count = 1) {\n        const index = this._index(this.bodyIndex.bind(this), from);\n        const param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        this._bodies.splice(param[0], param[1]);\n        this._bnames.splice(param[0], param[1]);\n        return this;\n    }\n    removeParticle(from, count = 1) {\n        const index = this._index(this.particleIndex.bind(this), from);\n        const param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        this._particles.splice(param[0], param[1]);\n        this._pnames.splice(param[0], param[1]);\n        return this;\n    }\n    static edgeConstraint(p1, p2, dist, stiff = 1, precise = false) {\n        const m1 = 1 / (p1.mass || 1);\n        const m2 = 1 / (p2.mass || 1);\n        const mm = m1 + m2;\n        let delta = p2.$subtract(p1);\n        let distSq = dist * dist;\n        let d = (precise) ? (dist / delta.magnitude() - 1) : (distSq / (delta.dot(delta) + distSq) - 0.5);\n        let f = delta.$multiply(d * stiff);\n        p1.subtract(f.$multiply(m1 / mm));\n        p2.add(f.$multiply(m2 / mm));\n        return p1;\n    }\n    static boundConstraint(p, rect, damping = 0.75) {\n        let bound = rect.boundingBox();\n        let np = p.$min(bound[1].subtract(p.radius)).$max(bound[0].add(p.radius));\n        if (np[0] === bound[0][0] || np[0] === bound[1][0]) {\n            let c = p.changed.$multiply(damping);\n            p.previous = np.$subtract(new Pt(-c[0], c[1]));\n        }\n        else if (np[1] === bound[0][1] || np[1] === bound[1][1]) {\n            let c = p.changed.$multiply(damping);\n            p.previous = np.$subtract(new Pt(c[0], -c[1]));\n        }\n        p.to(np);\n    }\n    integrate(p, dt, prevDt) {\n        p.addForce(this._gravity);\n        p.verlet(dt, this._friction, prevDt);\n        return p;\n    }\n    _updateParticles(dt) {\n        for (let i = 0, len = this._particles.length; i < len; i++) {\n            let p = this._particles[i];\n            this.integrate(p, dt, this._lastTime);\n            World.boundConstraint(p, this._bound, this._damping);\n            for (let k = i + 1; k < len; k++) {\n                if (i !== k) {\n                    let p2 = this._particles[k];\n                    p.collide(p2, this._damping);\n                }\n            }\n            if (this._drawParticles)\n                this._drawParticles(p, i);\n        }\n        this._lastTime = dt;\n    }\n    _updateBodies(dt) {\n        for (let i = 0, len = this._bodies.length; i < len; i++) {\n            let bds = this._bodies[i];\n            if (bds) {\n                for (let k = 0, klen = bds.length; k < klen; k++) {\n                    let bk = bds[k];\n                    World.boundConstraint(bk, this._bound, this._damping);\n                    this.integrate(bk, dt, this._lastTime);\n                }\n                for (let k = i + 1; k < len; k++) {\n                    bds.processBody(this._bodies[k]);\n                }\n                for (let m = 0, mlen = this._particles.length; m < mlen; m++) {\n                    bds.processParticle(this._particles[m]);\n                }\n                bds.processEdges();\n                if (this._drawBodies)\n                    this._drawBodies(bds, i);\n            }\n        }\n    }\n}\nexport class Particle extends Pt {\n    constructor(...args) {\n        super(...args);\n        this._mass = 1;\n        this._radius = 0;\n        this._force = new Pt();\n        this._prev = new Pt();\n        this._lock = false;\n        this._prev = this.clone();\n    }\n    get mass() { return this._mass; }\n    set mass(m) { this._mass = m; }\n    get radius() { return this._radius; }\n    set radius(f) { this._radius = f; }\n    get previous() { return this._prev; }\n    set previous(p) { this._prev = p; }\n    get force() { return this._force; }\n    set force(g) { this._force = g; }\n    get body() { return this._body; }\n    set body(b) { this._body = b; }\n    get lock() { return this._lock; }\n    set lock(b) {\n        this._lock = b;\n        this._lockPt = new Pt(this);\n    }\n    get changed() { return this.$subtract(this._prev); }\n    set position(p) {\n        this.previous.to(this);\n        if (this._lock)\n            this._lockPt = p;\n        this.to(p);\n    }\n    size(r) {\n        this._mass = r;\n        this._radius = r;\n        return this;\n    }\n    addForce(...args) {\n        this._force.add(...args);\n        return this._force;\n    }\n    verlet(dt, friction, lastDt) {\n        if (this._lock) {\n            this.to(this._lockPt);\n        }\n        else {\n            let lt = (lastDt) ? lastDt : dt;\n            let a = this._force.multiply(dt * (dt + lt) / 2);\n            let v = this.changed.multiply(friction * dt / lt).add(a);\n            this._prev = this.clone();\n            this.add(v);\n            this._force = new Pt();\n        }\n        return this;\n    }\n    hit(...args) {\n        this._prev.subtract(new Pt(...args).$divide(Math.sqrt(this._mass)));\n        return this;\n    }\n    collide(p2, damp = 1) {\n        let p1 = this;\n        let dp = p1.$subtract(p2);\n        let distSq = dp.magnitudeSq();\n        let dr = p1.radius + p2.radius;\n        if (distSq < dr * dr) {\n            let c1 = p1.changed;\n            let c2 = p2.changed;\n            let dist = Math.sqrt(distSq);\n            let d = dp.$multiply(((dist - dr) / dist) / 2);\n            let np1 = p1.$subtract(d);\n            let np2 = p2.$add(d);\n            p1.to(np1);\n            p2.to(np2);\n            let f1 = damp * dp.dot(c1) / distSq;\n            let f2 = damp * dp.dot(c2) / distSq;\n            let dm1 = p1.mass / (p1.mass + p2.mass);\n            let dm2 = p2.mass / (p1.mass + p2.mass);\n            c1.add(new Pt(f2 * dp[0] - f1 * dp[0], f2 * dp[1] - f1 * dp[1]).$multiply(dm2));\n            c2.add(new Pt(f1 * dp[0] - f2 * dp[0], f1 * dp[1] - f2 * dp[1]).$multiply(dm1));\n            p1.previous = p1.$subtract(c1);\n            p2.previous = p2.$subtract(c2);\n        }\n    }\n    toString() {\n        return `Particle: ${this[0]} ${this[1]} | previous ${this._prev[0]} ${this._prev[1]} | mass ${this._mass}`;\n    }\n}\nexport class Body extends Group {\n    constructor() {\n        super();\n        this._cs = [];\n        this._stiff = 1;\n        this._locks = {};\n        this._mass = 1;\n    }\n    static fromGroup(list, stiff = 1, autoLink = true, autoMass = true) {\n        let b = new Body().init(list);\n        if (autoLink)\n            b.linkAll(stiff);\n        if (autoMass)\n            b.autoMass();\n        return b;\n    }\n    init(list, stiff = 1) {\n        let c = new Pt();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = new Particle(list[i]);\n            p.body = this;\n            c.add(list[i]);\n            this.push(p);\n        }\n        this._stiff = stiff;\n        return this;\n    }\n    get mass() { return this._mass; }\n    set mass(m) {\n        this._mass = m;\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i].mass = this._mass;\n        }\n    }\n    autoMass() {\n        this.mass = Math.sqrt(Polygon.area(this)) / 10;\n        return this;\n    }\n    link(index1, index2, stiff) {\n        if (index1 < 0 || index1 >= this.length)\n            throw new Error(\"index1 is not in the Group's indices\");\n        if (index2 < 0 || index2 >= this.length)\n            throw new Error(\"index1 is not in the Group's indices\");\n        let d = this[index1].$subtract(this[index2]).magnitude();\n        this._cs.push([index1, index2, d, stiff || this._stiff]);\n        return this;\n    }\n    linkAll(stiff) {\n        let half = this.length / 2;\n        for (let i = 0, len = this.length; i < len; i++) {\n            let n = (i >= len - 1) ? 0 : i + 1;\n            this.link(i, n, stiff);\n            if (len > 4) {\n                let nd = (Math.floor(half / 2)) + 1;\n                let n2 = (i >= len - nd) ? i % len : i + nd;\n                this.link(i, n2, stiff);\n            }\n            if (i <= half - 1) {\n                this.link(i, Math.min(this.length - 1, i + Math.floor(half)));\n            }\n        }\n    }\n    linksToLines() {\n        let gs = [];\n        for (let i = 0, len = this._cs.length; i < len; i++) {\n            let ln = this._cs[i];\n            gs.push(new Group(this[ln[0]], this[ln[1]]));\n        }\n        return gs;\n    }\n    processEdges() {\n        for (let i = 0, len = this._cs.length; i < len; i++) {\n            let [m, n, d, s] = this._cs[i];\n            World.edgeConstraint(this[m], this[n], d, s);\n        }\n    }\n    processBody(b) {\n        let b1 = this;\n        let b2 = b;\n        let hit = Polygon.hasIntersectPolygon(b1, b2);\n        if (hit) {\n            let cv = hit.normal.$multiply(hit.dist);\n            let t;\n            let eg = hit.edge;\n            if (Math.abs(eg[0][0] - eg[1][0]) > Math.abs(eg[0][1] - eg[1][1])) {\n                t = (hit.vertex[0] - cv[0] - eg[0][0]) / (eg[1][0] - eg[0][0]);\n            }\n            else {\n                t = (hit.vertex[1] - cv[1] - eg[0][1]) / (eg[1][1] - eg[0][1]);\n            }\n            let lambda = 1 / (t * t + (1 - t) * (1 - t));\n            let m0 = hit.vertex.body.mass || 1;\n            let m1 = hit.edge[0].body.mass || 1;\n            let mr0 = m0 / (m0 + m1);\n            let mr1 = m1 / (m0 + m1);\n            eg[0].subtract(cv.$multiply(mr0 * (1 - t) * lambda / 2));\n            eg[1].subtract(cv.$multiply(mr0 * t * lambda / 2));\n            hit.vertex.add(cv.$multiply(mr1));\n        }\n    }\n    processParticle(b) {\n        let b1 = this;\n        let b2 = b;\n        let hit = Polygon.hasIntersectCircle(b1, Circle.fromCenter(b, b.radius));\n        if (hit) {\n            let cv = hit.normal.$multiply(hit.dist);\n            let t;\n            let eg = hit.edge;\n            if (Math.abs(eg[0][0] - eg[1][0]) > Math.abs(eg[0][1] - eg[1][1])) {\n                t = (hit.vertex[0] - cv[0] - eg[0][0]) / (eg[1][0] - eg[0][0]);\n            }\n            else {\n                t = (hit.vertex[1] - cv[1] - eg[0][1]) / (eg[1][1] - eg[0][1]);\n            }\n            let lambda = 1 / (t * t + (1 - t) * (1 - t));\n            let m0 = hit.vertex.mass || b2.mass || 1;\n            let m1 = hit.edge[0].body.mass || 1;\n            let mr0 = m0 / (m0 + m1);\n            let mr1 = m1 / (m0 + m1);\n            eg[0].subtract(cv.$multiply(mr0 * (1 - t) * lambda / 2));\n            eg[1].subtract(cv.$multiply(mr0 * t * lambda / 2));\n            let c1 = b.changed.add(cv.$multiply(mr1));\n            b.previous = b.$subtract(c1);\n        }\n    }\n}\n","export * from \"./Canvas\";\nexport * from \"./Create\";\nexport * from \"./Form\";\nexport * from \"./LinearAlgebra\";\nexport * from \"./Num\";\nexport * from \"./Op\";\nexport * from \"./Pt\";\nexport * from \"./Space\";\nexport * from \"./Color\";\nexport * from \"./Util\";\nexport * from \"./Dom\";\nexport * from \"./Svg\";\nexport * from \"./Typography\";\nexport * from \"./Physics\";\nexport * from \"./UI\";\n","const palettes = [\n\t[\"#FBF9FA\", \"#Fd0054\", \"#A80038\", \"#2B2024\"],\n\t[\"#F2F4B2\", \"#CCE490\", \"#0C907D\", \"#0D627A\"],\n\t[\"#FFF0F8\", \"#FFC2E9\", \"#CCA2E1\", \"#543E5C\"],\n\t[\"#F2F7FF\", \"#0B409C\", \"#10316B\", \"#FFE867\"],\n\t[\"#1B3764\", \"#4AB8B8\", \"#FAFCCB\", \"#EFA35C\"]\n]\n\nexport function getPalette() {\n\treturn palettes[Math.floor(Math.random() * palettes[0].length)];\n}","import { CanvasSpace, Pt, Group, Create, Noise } from 'pts';\nimport { getPalette }from './palettes';\nconst space = new CanvasSpace(\"#card\")\n\t.setup({ bgcolor: \"#ffffff\" });\n\nconst form = space.getForm();\nconst palette = getPalette();\nlet noiseGrid: Noise[];\n\nspace.add({\n\tstart: bound => {\n\t\tconst ln = Create.distributeLinear([\n\t\t\t\t\tnew Pt(0, space.center.y),\n\t\t\t\t\tnew Pt(space.width, space.center.y)\n\t\t\t\t\t], 50);\n\t\tconst gd = Create.gridPts(space.innerBound, 15, 10);\n\t\tnoiseGrid = <Noise[]> Create.noisePts(gd, 0.1, 0.1, 10, 10);\n\t},\n\n\tanimate: (time, ftime) => {\n\t\tlet speed = space.pointer.$subtract(space.center).divide(space.center).abs();\n\t\t// Generate noise in a grid\n\t\tnoiseGrid.map((p, i) => {\n\t\t\tp.step(0.01 * speed.x, 0.01 * (1 - speed.y));\n\t\t\tform.fillOnly(palette[i%4]).point(p, Math.abs(p.noise2D() * space.size.x / 25));\n\t\t});\n\t}\n});\n\nspace.bindMouse().play();\n"]}